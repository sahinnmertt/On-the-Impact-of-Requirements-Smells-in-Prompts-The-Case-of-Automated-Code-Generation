# Arkanoid Game in Java 8

Here's the complete implementation of the Arkanoid game according to the specifications:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Ball {
    int x;
    int y;
    int diameter = 10;
    int xSpeed;
    int ySpeed;

    Ball(int x, int y) {
        this.x = x;
        this.y = y;
        this.xSpeed = 5;
        this.ySpeed = 5;
    }

    void move() {
        x += xSpeed;
        y += ySpeed;
    }
}

class Paddle {
    int x;
    int y;
    int width = 20;
    int height = 10;

    Paddle(int x) {
        this.x = x;
        this.y = 290; // Bottom of the board
    }

    void moveLeft() {
        if (x > 0) {
            x -= 5;
        }
    }

    void moveRight() {
        if (x < 180) { // Board width - paddle width
            x += 5;
        }
    }
}

class Brick {
    int x;
    int y;
    int width;
    int height = 10;
    int hitsRequired;
    String color;
    boolean destroyed = false;

    Brick(int x, int y, String color, int hitsRequired) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.hitsRequired = hitsRequired;
        this.width = color.equals("gold") ? 40 : 20;
    }

    void hit() {
        hitsRequired--;
        if (hitsRequired <= 0) {
            destroyed = true;
        }
    }
}

class Board {
    int width = 200;
    int height = 300;

    Board(int width, int height) {
        this.width = width;
        this.height = height;
    }
}

class Game {
    Ball ball;
    Paddle paddle;
    Board board;
    List<Brick> bricks;
    int level = 1;
    int lives = 3;
    boolean gameOver = false;
    int maxLevel = 33;

    Game() {
        board = new Board(200, 300);
        paddle = new Paddle(90); // Center of the board
        ball = new Ball(0, 0);
        bricks = new ArrayList<>();
        generateBricks();
    }

    void generateBricks() {
        bricks.clear();
        Random random = new Random();

        // Add blue bricks (50 in level 1, decreasing in higher levels)
        int blueBricks = Math.max(50 - (level - 1) * 5, 10);
        for (int i = 0; i < blueBricks; i++) {
            int x = random.nextInt(180); // 200 - brick width (20)
            int y = random.nextInt(100); // Upper third of the board
            bricks.add(new Brick(x, y, "blue", 1));
        }

        // Add red bricks (2 per level after level 1)
        int redBricks = (level - 1) * 2;
        for (int i = 0; i < redBricks; i++) {
            int x = random.nextInt(180);
            int y = random.nextInt(100);
            bricks.add(new Brick(x, y, "red", 2));
        }

        // Add gold bricks (1 per level after level 1)
        int goldBricks = level - 1;
        for (int i = 0; i < goldBricks; i++) {
            int x = random.nextInt(160); // 200 - brick width (40)
            int y = random.nextInt(100);
            bricks.add(new Brick(x, y, "gold", 3));
        }
    }

    void updateGame() {
        ball.move();
        checkCollisions();

        // Check if level is completed
        boolean levelComplete = true;
        for (Brick brick : bricks) {
            if (!brick.destroyed) {
                levelComplete = false;
                break;
            }
        }

        if (levelComplete) {
            if (level < maxLevel) {
                nextLevel();
            } else {
                gameOver = true;
                System.out.println("Congratulations! You've completed all levels!");
            }
        }
    }

    void checkCollisions() {
        // Check wall collisions
        if (ball.x <= 0 || ball.x >= board.width - ball.diameter) {
            ball.xSpeed = -ball.xSpeed;
        }
        if (ball.y <= 0) {
            ball.ySpeed = -ball.ySpeed;
        }

        // Check bottom collision (lose life)
        if (ball.y >= board.height) {
            loseLife();
            return;
        }

        // Check paddle collision
        if (ball.y + ball.diameter >= paddle.y &&
            ball.y <= paddle.y + paddle.height &&
            ball.x + ball.diameter >= paddle.x &&
            ball.x <= paddle.x + paddle.width) {
            ball.ySpeed = -Math.abs(ball.ySpeed); // Ensure ball goes up
            // Add some angle variation based on where ball hits paddle
            int paddleCenter = paddle.x + paddle.width / 2;
            int ballCenter = ball.x + ball.diameter / 2;
            ball.xSpeed = (ballCenter - paddleCenter) / 5;
        }

        // Check brick collisions
        for (Brick brick : bricks) {
            if (!brick.destroyed &&
                ball.x + ball.diameter >= brick.x &&
                ball.x <= brick.x + brick.width &&
                ball.y + ball.diameter >= brick.y &&
                ball.y <= brick.y + brick.height) {

                brick.hit();

                // Determine collision side and bounce accordingly
                if (ball.x + ball.diameter <= brick.x + 5 || ball.x >= brick.x + brick.width - 5) {
                    ball.xSpeed = -ball.xSpeed;
                } else {
                    ball.ySpeed = -ball.ySpeed;
                }
                break;
            }
        }
    }

    void loseLife() {
        lives--;
        if (lives <= 0) {
            gameOver = true;
        } else {
            // Reset ball and paddle position
            ball = new Ball(0, 0);
            paddle = new Paddle(90);
        }
    }

    void nextLevel() {
        level++;
        ball = new Ball(0, 0);
        ball.xSpeed = 5 + (level - 1);
        ball.ySpeed = 5 + (level - 1);
        paddle = new Paddle(90);
        generateBricks();
    }

    void resetGame() {
        level = 1;
        lives = 3;
        gameOver = false;
        ball = new Ball(0, 0);
        paddle = new Paddle(90);
        generateBricks();
    }
}

public class ArkanoidGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Game game = new Game();

        // Simple text-based simulation of the game
        // In a real implementation, this would be replaced with a proper game loop and GUI
        System.out.println("Arkanoid Game - Use arrow keys to move paddle");
        System.out.println("Press Enter to start...");
        scanner.nextLine();

        while (!game.gameOver) {
            game.updateGame();

            // Simulate user input
            System.out.println("Level: " + game.level + " | Lives: " + game.lives);
            System.out.println("Ball position: (" + game.ball.x + ", " + game.ball.y + ")");
            System.out.println("Paddle position: " + game.paddle.x);

            System.out.print("Move (L/R/N): ");
            String input = scanner.nextLine().toUpperCase();
            if (input.equals("L")) {
                game.paddle.moveLeft();
            } else if (input.equals("R")) {
                game.paddle.moveRight();
            }

            // Count remaining bricks
            int remainingBricks = 0;
            for (Brick brick : game.bricks) {
                if (!brick.destroyed) remainingBricks++;
            }
            System.out.println("Bricks remaining: " + remainingBricks);
        }

        System.out.println("Game Over! Play again? (Y/N)");
        String playAgain = scanner.nextLine().toUpperCase();
        if (playAgain.equals("Y")) {
            game.resetGame();
            main(args); // Restart game
        }

        scanner.close();
    }
}
```

This implementation includes all the required classes and methods, following the specifications exactly. The game features:

1. Ball physics with bouncing off walls, paddle, and bricks
2. Paddle movement controlled by user input
3. Different types of bricks with varying hit points
4. Level progression with increasing difficulty
5. Lives system and game over conditions
6. Random brick generation for each level
7. Proper collision detection and response

The main game loop is simplified for console input/output, but the core game logic is fully implemented according to the requirements. In a real implementation, this would be connected to a proper GUI framework for visual rendering and keyboard input handling.

The game can be extended with additional features like scoring, sound effects, and more sophisticated level generation, but this implementation covers all the specified requirements.