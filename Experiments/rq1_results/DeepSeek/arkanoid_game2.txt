# Arkanoid Game in Java 8

Here's the complete implementation of the Arkanoid game according to the specifications:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Ball {
    int x;
    int y;
    int diameter = 10;
    int xSpeed;
    int ySpeed;

    Ball(int x, int y) {
        this.x = x;
        this.y = y;
        this.xSpeed = 5;
        this.ySpeed = 5;
    }

    void move() {
        x += xSpeed;
        y += ySpeed;
    }
}

class Paddle {
    int x;
    int y;
    int width = 20;
    int height = 10;

    Paddle(int x) {
        this.x = x;
        this.y = 290; // Bottom of the board
    }

    void moveLeft() {
        if (x > 0) {
            x -= 5;
        }
    }

    void moveRight() {
        if (x < 180) { // Board width - paddle width
            x += 5;
        }
    }
}

class Brick {
    int x;
    int y;
    int width;
    int height = 10;
    int hitsRequired;
    String color;
    boolean destroyed = false;

    Brick(int x, int y, String color, int hitsRequired) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.hitsRequired = hitsRequired;
        this.width = color.equals("gold") ? 40 : 20;
    }

    void hit() {
        hitsRequired--;
        if (hitsRequired <= 0) {
            destroyed = true;
        }
    }
}

class Board {
    int width = 200;
    int height = 300;

    Board(int width, int height) {
        this.width = width;
        this.height = height;
    }
}

class Game {
    Ball ball;
    Paddle paddle;
    Board board;
    List<Brick> bricks;
    int level = 1;
    int lives = 3;
    boolean gameOver = false;
    int maxLevel = 33;

    Game() {
        board = new Board(200, 300);
        paddle = new Paddle(90); // Center of the board
        ball = new Ball(0, 0);
        bricks = new ArrayList<>();
        generateBricks();
    }

    void generateBricks() {
        bricks.clear();
        Random random = new Random();

        // Add blue bricks (50 in level 1, decreasing by 2 each level)
        int blueBricks = 50 - (level - 1) * 2;
        for (int i = 0; i < blueBricks; i++) {
            int x = random.nextInt(180); // 200 - brick width (20)
            int y = random.nextInt(100); // Upper third of the board
            bricks.add(new Brick(x, y, "blue", 1));
        }

        // Add red bricks (2 per level)
        for (int i = 0; i < level * 2; i++) {
            int x = random.nextInt(180);
            int y = random.nextInt(100);
            bricks.add(new Brick(x, y, "red", 2));
        }

        // Add gold bricks (1 per level)
        for (int i = 0; i < level; i++) {
            int x = random.nextInt(160); // 200 - brick width (40)
            int y = random.nextInt(100);
            bricks.add(new Brick(x, y, "gold", 3));
        }
    }

    void updateGame() {
        ball.move();
        checkCollisions();

        // Check if all bricks are destroyed
        boolean levelComplete = true;
        for (Brick brick : bricks) {
            if (!brick.destroyed) {
                levelComplete = false;
                break;
            }
        }

        if (levelComplete) {
            if (level < maxLevel) {
                nextLevel();
            } else {
                gameOver = true;
                System.out.println("Congratulations! You've completed all levels!");
            }
        }
    }

    void checkCollisions() {
        // Check wall collisions
        if (ball.x <= 0 || ball.x >= board.width - ball.diameter) {
            ball.xSpeed = -ball.xSpeed;
        }
        if (ball.y <= 0) {
            ball.ySpeed = -ball.ySpeed;
        }

        // Check bottom collision (lose life)
        if (ball.y >= board.height) {
            loseLife();
            return;
        }

        // Check paddle collision
        if (ball.y + ball.diameter >= paddle.y &&
            ball.y <= paddle.y + paddle.height &&
            ball.x + ball.diameter >= paddle.x &&
            ball.x <= paddle.x + paddle.width) {
            ball.ySpeed = -Math.abs(ball.ySpeed); // Always bounce upward
        }

        // Check brick collisions
        for (Brick brick : bricks) {
            if (!brick.destroyed &&
                ball.x + ball.diameter >= brick.x &&
                ball.x <= brick.x + brick.width &&
                ball.y + ball.diameter >= brick.y &&
                ball.y <= brick.y + brick.height) {

                brick.hit();
                ball.ySpeed = -ball.ySpeed;
                break;
            }
        }
    }

    void loseLife() {
        lives--;
        if (lives <= 0) {
            gameOver = true;
        } else {
            // Reset ball and paddle position
            ball = new Ball(0, 0);
            paddle = new Paddle(90);
        }
    }

    void nextLevel() {
        level++;
        ball = new Ball(0, 0);
        ball.xSpeed += 1;
        ball.ySpeed += 1;
        paddle = new Paddle(90);
        generateBricks();
    }

    void resetGame() {
        level = 1;
        lives = 3;
        gameOver = false;
        ball = new Ball(0, 0);
        paddle = new Paddle(90);
        generateBricks();
    }
}

public class ArkanoidGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean playAgain = true;

        while (playAgain) {
            Game game = new Game();

            // Simple text-based simulation of the game
            // In a real implementation, this would be replaced with proper game loop and rendering
            System.out.println("Starting Arkanoid Game! Level: " + game.level);

            while (!game.gameOver) {
                System.out.println("Enter command (a: left, d: right, q: quit): ");
                String input = scanner.nextLine().toLowerCase();

                if (input.equals("q")) {
                    game.gameOver = true;
                    break;
                } else if (input.equals("a")) {
                    game.paddle.moveLeft();
                } else if (input.equals("d")) {
                    game.paddle.moveRight();
                }

                game.updateGame();

                // Simple status display
                System.out.println("Ball position: (" + game.ball.x + ", " + game.ball.y + ")");
                System.out.println("Paddle position: " + game.paddle.x);
                System.out.println("Lives: " + game.lives);
                System.out.println("Level: " + game.level);

                if (game.gameOver) {
                    System.out.println("Game Over! Final Level: " + game.level);
                }
            }

            System.out.println("Play again? (y/n): ");
            String choice = scanner.nextLine().toLowerCase();
            if (!choice.equals("y")) {
                playAgain = false;
            }
        }

        scanner.close();
        System.out.println("Thanks for playing!");
    }
}
```

This implementation includes:

1. All required classes (Ball, Paddle, Brick, Board, Game, ArkanoidGame)
2. All specified attributes and methods
3. Game mechanics according to the requirements:
   - 33 levels
   - 200x300 pixel board
   - Correct sizes for all game elements
   - Ball movement and collision physics
   - Paddle control
   - Brick types with different hit requirements
   - Level progression with increasing difficulty
   - Lives system
   - Game over and restart functionality

The main method provides a simple text-based interface for testing the game logic. In a real implementation, you would want to add proper graphics rendering using Java's graphics libraries (like JavaFX or Swing), but this version demonstrates all the core game mechanics as specified.

The game can be controlled with:
- 'a' key to move paddle left
- 'd' key to move paddle right
- 'q' key to quit
- 'y'/'n' to play again after game over