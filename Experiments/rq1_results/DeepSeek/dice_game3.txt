Here's the complete Java 8 implementation of the dice game according to the specifications:

```java
import java.util.*;
import java.util.stream.*;

class Player {
    String name;
    int points;
    String pointColor;
    int[] consecutiveRolls = new int[3]; // tracks last 3 rolls

    Player(String name) {
        this.name = name;
        this.points = 0;
    }

    void updatePoints(int diceValue) {
        // Handle consecutive rolls
        consecutiveRolls[0] = consecutiveRolls[1];
        consecutiveRolls[1] = consecutiveRolls[2];
        consecutiveRolls[2] = diceValue;
        
        // Check for three same consecutive rolls
        if (consecutiveRolls[0] == consecutiveRolls[1] && 
            consecutiveRolls[1] == consecutiveRolls[2] && 
            consecutiveRolls[0] != 0) {
            resetPoints();
            return;
        }

        // Apply dice value modifiers
        int modifiedValue = diceValue;
        if (diceValue == 2) {
            modifiedValue *= 3;
        } else if (diceValue % 2 == 0 && diceValue != 2) {
            modifiedValue /= 2;
        }

        points += modifiedValue;
        updateColor();
    }

    void updateColor() {
        if (points > 11) {
            pointColor = "purple";
        } else if (points > 5) {
            pointColor = "yellow";
        } else {
            // Initial colors are set in initializeGame()
        }
    }

    void resetPoints() {
        points = 0;
        updateColor();
    }
}

class Game {
    List<Player> players = new ArrayList<>();
    List<Integer> turnOrder = new ArrayList<>();
    int turnCount = 0;
    boolean gameOver = false;
    Scanner scanner = new Scanner(System.in);

    void initializeGame() {
        players.clear();
        turnOrder.clear();
        turnCount = 0;
        gameOver = false;

        // Get player names
        for (int i = 1; i <= 3; i++) {
            System.out.print("Enter name for Player " + i + ": ");
            String name = scanner.nextLine();
            while (name.equals("Computer")) {
                System.out.println("Name cannot be Computer");
                System.out.print("Enter name for Player " + i + ": ");
                name = scanner.nextLine();
            }
            Player player = new Player(name);
            players.add(player);
        }

        // Set initial colors
        players.get(0).pointColor = "red";
        players.get(1).pointColor = "green";
        players.get(2).pointColor = "blue";

        // Random turn order
        turnOrder = IntStream.range(0, 3).boxed().collect(Collectors.toList());
        Collections.shuffle(turnOrder);
    }

    void manageTurn() {
        if (gameOver) return;

        int currentPlayerIndex = turnOrder.get(turnCount % 3);
        Player currentPlayer = players.get(currentPlayerIndex);

        System.out.println("\n" + currentPlayer.name + "'s turn (Color: " + currentPlayer.pointColor + ")");
        System.out.println("Current points: " + currentPlayer.points);

        // Skip option
        System.out.print("Would you like to skip? ");
        String skipChoice = scanner.nextLine().toLowerCase();
        if (skipChoice.equals("yes")) {
            System.out.println(currentPlayer.name + " chose to skip their turn.");
            turnCount++;
            return;
        }

        boolean reroll;
        int diceValue;
        do {
            reroll = false;
            diceValue = rollDice();
            System.out.println("Dice rolled: " + diceValue);

            // Handle special dice values
            if (diceValue == 1) {
                System.out.print("Would you like to re-roll? ");
                String rerollChoice = scanner.nextLine().toLowerCase();
                if (rerollChoice.equals("yes")) {
                    reroll = true;
                    continue;
                }
            } else if (diceValue == 5) {
                int secondRoll = rollDice();
                System.out.println("Second dice rolled: " + secondRoll);
                diceValue *= secondRoll;
                System.out.println("Combined value: " + diceValue);
            }

            currentPlayer.updatePoints(diceValue);
            System.out.println(currentPlayer.name + " now has " + currentPlayer.points + " points");

            // Check for equality
            displayEquality();

            // Check if next player should be skipped
            if (diceValue == 6) {
                System.out.println("Next player will be skipped!");
                turnCount++; // Skip next player by incrementing turn count
            }

        } while (reroll);

        turnCount++;
        checkGameEndConditions();
    }

    int rollDice() {
        return new Random().nextInt(6) + 1;
    }

    boolean checkGameEndConditions() {
        // Check turn limit
        if (turnCount >= 12) {
            gameOver = true;
            return true;
        }

        // Check if any player has 10 more points than others
        for (Player p : players) {
            boolean allOthers10Less = true;
            for (Player other : players) {
                if (p != other && p.points <= other.points + 10) {
                    allOthers10Less = false;
                    break;
                }
            }
            if (allOthers10Less && p.points > 0) {
                gameOver = true;
                return true;
            }
        }

        return false;
    }

    void declareWinner() {
        if (!gameOver) return;

        // Find player with highest score
        Player winner = Collections.max(players, Comparator.comparingInt(p -> p.points));

        // Check if there's a tie for first place
        long winnersCount = players.stream()
            .filter(p -> p.points == winner.points)
            .count();

        if (winnersCount > 1) {
            System.out.println("No winner - there's a tie!");
        } else {
            System.out.println("Congratulations " + winner.name + " you won the game! You are the best!");
        }

        // Print all players' points
        System.out.println("\nFinal scores:");
        for (Player p : players) {
            System.out.println(p.name + ": " + p.points + " points");
        }
    }

    void displayEquality() {
        // Check if all players have same points
        if (players.stream().map(p -> p.points).distinct().count() == 1) {
            System.out.println("Equality!");
        }
    }

    void prepareForNextGame() {
        // Order players by points from last game ascending
        turnOrder = IntStream.range(0, 3)
            .boxed()
            .sorted(Comparator.comparingInt(i -> players.get(i).points))
            .collect(Collectors.toList());

        // Reset game state
        turnCount = 0;
        gameOver = false;
        for (Player p : players) {
            p.points = 0;
            p.consecutiveRolls = new int[3];
            p.updateColor();
        }
    }
}

public class DiceGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Game game = new Game();
        
        game.initializeGame();
        
        while (true) {
            while (!game.gameOver) {
                game.manageTurn();
            }
            
            game.declareWinner();
            
            System.out.print("\nWould you like to play again? (yes/no): ");
            String playAgain = scanner.nextLine().toLowerCase();
            if (!playAgain.equals("yes")) {
                break;
            }
            
            game.prepareForNextGame();
        }
        
        System.out.println("Thanks for playing!");
        scanner.close();
    }
}
```

This implementation includes all 25 requirements:

1. Three-player dice game
2. Players start with 0 points
3. Players take turns
4. Each turn involves dice rolling
5. Dice values are added to points (with modifications)
6. Prints dice count and points after each turn
7. Game ends after 12 turns
8. Game ends if one player has 10+ points more than others
9. Reroll option for dice value 1
10. Winner congratulation message
11. Initial point colors (red, green, blue)
12. Points > 11 turn purple
13. Rolling 6 skips next player
14. Dice value 2 is tripled, other even values halved
15. "Equality!" message when points are equal
16. Random initial turn order
17. "Computer" name restriction
18. Rolling 5 triggers another roll and multiplication
19. Points > 5 turn yellow
20. Skip turn option
21. Three same consecutive rolls reset points
22. Tie-breaking condition
23. Prints final points and winner
24. Most points wins
25. Subsequent games order players by previous points

The game can be run multiple times, with turn order in subsequent games determined by the previous game's scores.