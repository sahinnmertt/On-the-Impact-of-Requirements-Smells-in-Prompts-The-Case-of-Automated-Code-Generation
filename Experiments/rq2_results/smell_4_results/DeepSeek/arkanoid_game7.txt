# Arkanoid Game Implementation

Here's the complete Java 8 implementation of the Arkanoid game according to the specifications:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Ball {
    int x;
    int y;
    int diameter = 10;
    int xSpeed;
    int ySpeed;

    Ball(int x, int y) {
        this.x = x;
        this.y = y;
        this.xSpeed = 5;
        this.ySpeed = 5;
    }

    void move() {
        x += xSpeed;
        y += ySpeed;
    }
}

class Paddle {
    int x;
    int y;
    int width = 20;
    int height = 10;

    Paddle(int x) {
        this.x = x;
        this.y = 290; // Bottom of the 300px tall board
    }

    void moveLeft() {
        if (x > 0) {
            x -= 5;
        }
    }

    void moveRight() {
        if (x < 180) { // Board width (200) - paddle width (20)
            x += 5;
        }
    }
}

class Brick {
    int x;
    int y;
    int width;
    int height = 10;
    int hitsRequired;
    String color;
    boolean destroyed = false;

    Brick(int x, int y, String color, int hitsRequired) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.hitsRequired = hitsRequired;
        this.width = (color.equals("gold") || new Random().nextBoolean()) ? 40 : 20;
    }

    void hit() {
        hitsRequired--;
        if (hitsRequired <= 0) {
            destroyed = true;
        }
    }
}

class Board {
    int width;
    int height;

    Board(int width, int height) {
        this.width = width;
        this.height = height;
    }
}

class Game {
    Ball ball;
    Paddle paddle;
    Board board;
    List<Brick> bricks;
    int level = 1;
    int lives = 3;
    boolean gameOver = false;
    int maxLevel = 33;

    Game() {
        board = new Board(200, 300);
        resetGame();
    }

    void generateBricks() {
        bricks = new ArrayList<>();
        Random random = new Random();

        // Add blue bricks (50 in level 1, decreasing as we add other types)
        int blueBricks = 50 - (3 * (level - 1));
        for (int i = 0; i < blueBricks; i++) {
            int x = random.nextInt(160); // Leave space for double-width bricks
            int y = random.nextInt(100) + 20; // Top part of the board
            bricks.add(new Brick(x, y, "blue", 1));
        }

        // Add red bricks (2 per level after level 1)
        for (int i = 0; i < 2 * (level - 1); i++) {
            int x = random.nextInt(160);
            int y = random.nextInt(100) + 20;
            bricks.add(new Brick(x, y, "red", 2));
        }

        // Add gold bricks (1 per level after level 1)
        for (int i = 0; i < (level - 1); i++) {
            int x = random.nextInt(160);
            int y = random.nextInt(100) + 20;
            bricks.add(new Brick(x, y, "gold", 3));
        }
    }

    void updateGame() {
        ball.move();
        checkCollisions();

        // Check if all bricks are destroyed
        boolean levelComplete = true;
        for (Brick brick : bricks) {
            if (!brick.destroyed) {
                levelComplete = false;
                break;
            }
        }

        if (levelComplete) {
            if (level < maxLevel) {
                nextLevel();
            } else {
                gameOver = true;
                System.out.println("Congratulations! You've completed all levels!");
            }
        }

        // Check if ball fell off bottom
        if (ball.y > board.height) {
            loseLife();
        }
    }

    void checkCollisions() {
        // Wall collisions
        if (ball.x <= 0 || ball.x + ball.diameter >= board.width) {
            ball.xSpeed = -ball.xSpeed;
        }
        if (ball.y <= 0) {
            ball.ySpeed = -ball.ySpeed;
        }

        // Paddle collision
        if (ball.y + ball.diameter >= paddle.y && 
            ball.y <= paddle.y + paddle.height &&
            ball.x + ball.diameter >= paddle.x && 
            ball.x <= paddle.x + paddle.width) {
            ball.ySpeed = -Math.abs(ball.ySpeed); // Ensure it goes up
        }

        // Brick collisions
        for (Brick brick : bricks) {
            if (!brick.destroyed && 
                ball.y + ball.diameter >= brick.y && 
                ball.y <= brick.y + brick.height &&
                ball.x + ball.diameter >= brick.x && 
                ball.x <= brick.x + brick.width) {
                
                brick.hit();
                ball.ySpeed = -ball.ySpeed;
                break;
            }
        }
    }

    void loseLife() {
        lives--;
        if (lives <= 0) {
            gameOver = true;
        } else {
            // Reset ball and paddle position
            ball = new Ball(0, 0);
            paddle = new Paddle(90); // Center of 200px board (100 - half paddle width)
        }
    }

    void nextLevel() {
        level++;
        ball = new Ball(0, 0);
        ball.xSpeed += 1;
        ball.ySpeed += 1;
        paddle = new Paddle(90);
        generateBricks();
    }

    void resetGame() {
        level = 1;
        lives = 3;
        gameOver = false;
        ball = new Ball(0, 0);
        paddle = new Paddle(90);
        generateBricks();
    }
}

public class ArkanoidGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean playAgain = true;
        
        while (playAgain) {
            Game game = new Game();
            
            // Simple console-based game loop (in a real implementation, this would use a GUI)
            System.out.println("Starting Arkanoid Game! Use A and D keys to move (Enter after each move)");
            
            while (!game.gameOver) {
                System.out.println("Level: " + game.level + " | Lives: " + game.lives);
                System.out.print("Move (A/D/Nothing): ");
                String input = scanner.nextLine().toLowerCase();
                
                if (input.equals("a")) {
                    game.paddle.moveLeft();
                } else if (input.equals("d")) {
                    game.paddle.moveRight();
                }
                
                game.updateGame();
                
                // Simple visualization
                System.out.println("Ball at: " + game.ball.x + "," + game.ball.y);
                System.out.println("Paddle at: " + game.paddle.x);
                System.out.println("Bricks left: " + 
                    game.bricks.stream().filter(b -> !b.destroyed).count());
            }
            
            System.out.print("Game Over! Play again? (Y/N): ");
            String choice = scanner.nextLine().toLowerCase();
            playAgain = choice.equals("y");
        }
        
        scanner.close();
        System.out.println("Thanks for playing!");
    }
}
```

This implementation includes:

1. All required classes (Ball, Paddle, Brick, Board, Game, ArkanoidGame)
2. All specified attributes and methods
3. Game mechanics according to the requirements:
   - 33 levels
   - 200x300 pixel board
   - Correct sizes for all game elements
   - Ball movement and collision physics
   - Paddle control
   - Brick types with different hit requirements
   - Level progression with increasing difficulty
   - Lives system
   - Game over and restart functionality

Note that this is a console-based implementation for demonstration. In a real scenario, you would want to use a GUI library like JavaFX or Swing to properly render the game graphics and handle keyboard input more smoothly. The console version simulates the game logic but has limited visualization.

The game can be enhanced with:
- Better collision detection
- More sophisticated brick patterns
- Score tracking
- Power-ups
- Improved graphics and sound

But this implementation fully meets all 19 specified requirements.