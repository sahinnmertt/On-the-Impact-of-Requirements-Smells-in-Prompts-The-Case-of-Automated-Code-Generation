Here's the complete implementation of the Arkanoid game in Java 8, following all the specified requirements:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Ball {
    int x;
    int y;
    int diameter = 10;
    int xSpeed;
    int ySpeed;

    Ball(int x, int y) {
        this.x = x;
        this.y = y;
        this.xSpeed = 5;
        this.ySpeed = 5;
    }

    void move() {
        x += xSpeed;
        y += ySpeed;
    }
}

class Paddle {
    int x;
    int y;
    int width = 20;
    int height = 10;

    Paddle(int x) {
        this.x = x;
        this.y = 290;
    }

    void moveLeft() {
        if (x > 0) {
            x -= 5;
        }
    }

    void moveRight(int boardWidth) {
        if (x < boardWidth - width) {
            x += 5;
        }
    }
}

class Brick {
    int x;
    int y;
    int width;
    int height = 10;
    int hitsRequired;
    String color;
    boolean destroyed = false;

    Brick(int x, int y, String color, int hitsRequired) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.hitsRequired = hitsRequired;
        this.width = color.equals("gold") ? 40 : 20;
    }

    void hit() {
        hitsRequired--;
        if (hitsRequired <= 0) {
            destroyed = true;
        }
    }
}

class Board {
    int width = 200;
    int height = 300;

    Board(int width, int height) {
        this.width = width;
        this.height = height;
    }
}

class Game {
    Ball ball;
    Paddle paddle;
    Board board;
    List<Brick> bricks;
    int level = 1;
    int lives = 3;
    boolean gameOver = false;
    int maxLevel = 33;

    Game() {
        board = new Board(200, 300);
        paddle = new Paddle(board.width / 2 - 10);
        ball = new Ball(0, 0);
        bricks = new ArrayList<>();
        generateBricks();
    }

    void generateBricks() {
        bricks.clear();
        Random random = new Random();

        // Add blue bricks (50 in level 1, decreasing by 2 each level)
        int blueBricks = 50 - (level - 1) * 2;
        for (int i = 0; i < blueBricks; i++) {
            int x = random.nextInt(board.width - 20);
            int y = random.nextInt(100) + 20; // Between 20 and 120
            bricks.add(new Brick(x, y, "blue", 1));
        }

        // Add red bricks (2 per level after level 1)
        int redBricks = (level - 1) * 2;
        for (int i = 0; i < redBricks; i++) {
            int x = random.nextInt(board.width - 20);
            int y = random.nextInt(100) + 20;
            bricks.add(new Brick(x, y, "red", 2));
        }

        // Add gold bricks (1 per level after level 1)
        int goldBricks = level - 1;
        for (int i = 0; i < goldBricks; i++) {
            int x = random.nextInt(board.width - 40);
            int y = random.nextInt(100) + 20;
            bricks.add(new Brick(x, y, "gold", 3));
        }
    }

    void updateGame() {
        ball.move();
        checkCollisions();

        // Check if all bricks are destroyed
        boolean levelComplete = true;
        for (Brick brick : bricks) {
            if (!brick.destroyed) {
                levelComplete = false;
                break;
            }
        }

        if (levelComplete) {
            if (level < maxLevel) {
                nextLevel();
            } else {
                gameOver = true;
                System.out.println("Congratulations! You won the game!");
            }
        }
    }

    void checkCollisions() {
        // Check wall collisions
        if (ball.x <= 0 || ball.x >= board.width - ball.diameter) {
            ball.xSpeed = -ball.xSpeed;
        }
        if (ball.y <= 0) {
            ball.ySpeed = -ball.ySpeed;
        }

        // Check bottom collision (lose life)
        if (ball.y >= board.height) {
            loseLife();
            return;
        }

        // Check paddle collision
        if (ball.y + ball.diameter >= paddle.y && 
            ball.y <= paddle.y + paddle.height &&
            ball.x + ball.diameter >= paddle.x && 
            ball.x <= paddle.x + paddle.width) {
            ball.ySpeed = -Math.abs(ball.ySpeed); // Ensure ball goes up
        }

        // Check brick collisions
        for (Brick brick : bricks) {
            if (!brick.destroyed && 
                ball.x + ball.diameter >= brick.x && 
                ball.x <= brick.x + brick.width &&
                ball.y + ball.diameter >= brick.y && 
                ball.y <= brick.y + brick.height) {
                
                brick.hit();
                ball.ySpeed = -ball.ySpeed;
                break;
            }
        }
    }

    void loseLife() {
        lives--;
        if (lives <= 0) {
            gameOver = true;
            System.out.println("Game Over!");
        } else {
            // Reset ball and paddle
            ball.x = 0;
            ball.y = 0;
            ball.xSpeed = 5 + (level - 1);
            ball.ySpeed = 5 + (level - 1);
            paddle.x = board.width / 2 - 10;
        }
    }

    void nextLevel() {
        level++;
        ball.x = 0;
        ball.y = 0;
        ball.xSpeed = 5 + (level - 1);
        ball.ySpeed = 5 + (level - 1);
        paddle.x = board.width / 2 - 10;
        generateBricks();
    }

    void resetGame() {
        level = 1;
        lives = 3;
        gameOver = false;
        ball.x = 0;
        ball.y = 0;
        ball.xSpeed = 5;
        ball.ySpeed = 5;
        paddle.x = board.width / 2 - 10;
        generateBricks();
    }
}

public class ArkanoidGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean playAgain = true;
        
        while (playAgain) {
            Game game = new Game();
            
            // Simple text-based simulation of the game loop
            while (!game.gameOver) {
                System.out.println("Level: " + game.level + " | Lives: " + game.lives);
                System.out.println("Ball position: (" + game.ball.x + ", " + game.ball.y + ")");
                
                // Simulate user input (in a real game, this would be event-based)
                System.out.print("Move paddle (l=left, r=right, n=none): ");
                String input = scanner.nextLine();
                
                if (input.equals("l")) {
                    game.paddle.moveLeft();
                } else if (input.equals("r")) {
                    game.paddle.moveRight(game.board.width);
                }
                
                game.updateGame();
                
                // Display bricks
                System.out.println("Bricks remaining: " + 
                    game.bricks.stream().filter(b -> !b.destroyed).count());
            }
            
            System.out.print("Play again? (y/n): ");
            playAgain = scanner.nextLine().equalsIgnoreCase("y");
        }
        
        scanner.close();
        System.out.println("Thanks for playing!");
    }
}
```

This implementation includes all the required classes and methods, following the specifications exactly. The game includes:

1. Ball physics with movement and collision detection
2. Paddle movement controlled by user input
3. Brick generation with different colors and hit requirements
4. Level progression with increasing difficulty
5. Lives system and game over conditions
6. Reset functionality

The main game loop is simulated with text input/output since this is a console implementation. In a real graphical version, you would replace the text-based parts with actual graphics and event handling for paddle movement.

The game follows all 19 requirements specified, including:
- 33 levels
- Proper board dimensions
- Correct sizes for all game elements
- Ball movement and collision physics
- Brick destruction mechanics
- Paddle controls
- Level progression and difficulty increase
- Lives system
- Game reset functionality