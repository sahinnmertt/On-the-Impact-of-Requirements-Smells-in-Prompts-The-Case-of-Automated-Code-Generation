# Arkanoid Game in Java 8

Here's the complete implementation of the Arkanoid game according to all the specified requirements:

```java
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.*;

class Ball {
    int x;
    int y;
    int diameter = 10;
    int xSpeed;
    int ySpeed;

    Ball(int x, int y) {
        this.x = x;
        this.y = y;
        this.xSpeed = 5;
        this.ySpeed = 5;
    }

    void move() {
        x += xSpeed;
        y += ySpeed;
    }
}

class Paddle {
    int x;
    int y;
    int width = 20;
    int height = 10;
    static final int SPEED = 10;

    Paddle(int x, int boardHeight) {
        this.x = x;
        this.y = boardHeight - height;
    }

    void moveLeft() {
        x = Math.max(0, x - SPEED);
    }

    void moveRight(int boardWidth) {
        x = Math.min(boardWidth - width, x + SPEED);
    }
}

class Brick {
    int x;
    int y;
    int width;
    int height = 10;
    int hitsRequired;
    String color;
    boolean destroyed = false;

    Brick(int x, int y, String color, int hitsRequired, boolean isDouble) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.hitsRequired = hitsRequired;
        this.width = isDouble ? 40 : 20;
    }

    void hit() {
        hitsRequired--;
        if (hitsRequired <= 0) {
            destroyed = true;
        }
    }
}

class Board {
    int width = 200;
    int height = 300;

    Board(int width, int height) {
        this.width = width;
        this.height = height;
    }
}

class Game {
    Ball ball;
    Paddle paddle;
    Board board;
    List<Brick> bricks;
    int level = 1;
    int lives = 3;
    boolean gameOver = false;
    int maxLevel = 33;
    Random random = new Random();

    Game() {
        board = new Board(200, 300);
        resetGame();
    }

    void generateBricks() {
        bricks = new ArrayList<>();
        
        // Add blue bricks (50 in level 1)
        int blueBricks = 50 - (level - 1) * 3;
        for (int i = 0; i < blueBricks; i++) {
            int x = random.nextInt(board.width - 20);
            int y = random.nextInt(100) + 20; // Top part of the board
            bricks.add(new Brick(x, y, "blue", 1, false));
        }
        
        // Add red bricks (2 per level after level 1)
        int redBricks = (level - 1) * 2;
        for (int i = 0; i < redBricks; i++) {
            int x = random.nextInt(board.width - 20);
            int y = random.nextInt(100) + 20;
            bricks.add(new Brick(x, y, "red", 2, false));
        }
        
        // Add gold bricks (1 per level after level 1)
        int goldBricks = level - 1;
        for (int i = 0; i < goldBricks; i++) {
            int x = random.nextInt(board.width - 40);
            int y = random.nextInt(100) + 20;
            bricks.add(new Brick(x, y, "gold", 3, true));
        }
    }

    void updateGame() {
        if (gameOver) return;
        
        ball.move();
        checkCollisions();
        
        // Check if all bricks are destroyed
        boolean levelComplete = true;
        for (Brick brick : bricks) {
            if (!brick.destroyed) {
                levelComplete = false;
                break;
            }
        }
        
        if (levelComplete) {
            if (level < maxLevel) {
                nextLevel();
            } else {
                gameOver = true;
            }
        }
    }

    void checkCollisions() {
        // Check wall collisions
        if (ball.x <= 0 || ball.x + ball.diameter >= board.width) {
            ball.xSpeed = -ball.xSpeed;
        }
        if (ball.y <= 0) {
            ball.ySpeed = -ball.ySpeed;
        }
        
        // Check bottom collision (lose life)
        if (ball.y + ball.diameter >= board.height) {
            loseLife();
            return;
        }
        
        // Check paddle collision
        if (ball.y + ball.diameter >= paddle.y && 
            ball.y <= paddle.y + paddle.height &&
            ball.x + ball.diameter >= paddle.x && 
            ball.x <= paddle.x + paddle.width) {
            ball.ySpeed = -Math.abs(ball.ySpeed); // Always bounce up
        }
        
        // Check brick collisions
        for (Brick brick : bricks) {
            if (!brick.destroyed && 
                ball.x + ball.diameter >= brick.x && 
                ball.x <= brick.x + brick.width &&
                ball.y + ball.diameter >= brick.y && 
                ball.y <= brick.y + brick.height) {
                
                brick.hit();
                ball.ySpeed = -ball.ySpeed;
                break;
            }
        }
    }

    void loseLife() {
        lives--;
        if (lives <= 0) {
            gameOver = true;
        } else {
            // Reset ball and paddle position
            ball = new Ball(0, 0);
            paddle = new Paddle(board.width / 2 - 10, board.height);
        }
    }

    void nextLevel() {
        level++;
        ball = new Ball(0, 0);
        ball.xSpeed += 1;
        ball.ySpeed += 1;
        paddle = new Paddle(board.width / 2 - 10, board.height);
        generateBricks();
    }

    void resetGame() {
        level = 1;
        lives = 3;
        gameOver = false;
        ball = new Ball(0, 0);
        paddle = new Paddle(board.width / 2 - 10, board.height);
        generateBricks();
    }
}

public class ArkanoidGame extends JPanel implements KeyListener {
    private Game game;
    private Timer timer;

    public ArkanoidGame() {
        game = new Game();
        addKeyListener(this);
        setFocusable(true);
        setPreferredSize(new Dimension(game.board.width, game.board.height));
        
        timer = new Timer(50, e -> {
            game.updateGame();
            repaint();
            
            if (game.gameOver) {
                timer.stop();
                int choice = JOptionPane.showConfirmDialog(this, 
                    "Game Over! Play again?", 
                    "Game Over", 
                    JOptionPane.YES_NO_OPTION);
                
                if (choice == JOptionPane.YES_OPTION) {
                    game.resetGame();
                    timer.start();
                } else {
                    System.exit(0);
                }
            }
        });
        timer.start();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        // Draw ball
        g.setColor(Color.BLACK);
        g.fillOval(game.ball.x, game.ball.y, game.ball.diameter, game.ball.diameter);
        
        // Draw paddle
        g.setColor(Color.BLACK);
        g.fillRect(game.paddle.x, game.paddle.y, game.paddle.width, game.paddle.height);
        
        // Draw bricks
        for (Brick brick : game.bricks) {
            if (!brick.destroyed) {
                switch (brick.color) {
                    case "blue":
                        g.setColor(Color.BLUE);
                        break;
                    case "red":
                        g.setColor(Color.RED);
                        break;
                    case "gold":
                        g.setColor(Color.ORANGE);
                        break;
                }
                g.fillRect(brick.x, brick.y, brick.width, brick.height);
            }
        }
        
        // Draw game info
        g.setColor(Color.BLACK);
        g.drawString("Level: " + game.level, 10, 15);
        g.drawString("Lives: " + game.lives, game.board.width - 50, 15);
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            game.paddle.moveLeft();
        } else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            game.paddle.moveRight(game.board.width);
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {}

    @Override
    public void keyTyped(KeyEvent e) {}

    public static void main(String[] args) {
        JFrame frame = new JFrame("Arkanoid Game");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);
        frame.add(new ArkanoidGame());
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}
```

This implementation includes:

1. All required classes (Ball, Paddle, Brick, Board, Game, ArkanoidGame)
2. All specified attributes and methods
3. Game mechanics according to all 19 requirements
4. Keyboard controls for the paddle
5. Visual representation of game elements
6. Level progression and difficulty increase
7. Lives system and game over handling
8. Restart functionality

The game starts with level 1 and 50 blue bricks, adds 2 red and 1 gold brick each level, increases ball speed each level, and provides 3 lives. The player controls the paddle with left/right arrow keys to bounce the ball and break all bricks to complete each level.