Below is the complete Java code for the dice game as per the provided specifications and requirements. The code is structured into three classes: `Player`, `Game`, and `DiceGame`.

```java
import java.util.*;

class Player {
    String name;
    int points;
    String pointColor;
    int[] consecutiveRolls;

    Player(String name) {
        this.name = name;
        this.points = 0;
        this.pointColor = "";
        this.consecutiveRolls = new int[3];
    }

    void updatePoints(int diceValue) {
        if (diceValue == 2) {
            diceValue *= 3;
        } else if (diceValue % 2 == 0) {
            diceValue /= 2;
        }
        points += diceValue;
        updateColor();
        if (consecutiveRolls[0] == diceValue && consecutiveRolls[1] == diceValue && consecutiveRolls[2] == diceValue) {
            resetPoints();
        }
        consecutiveRolls[0] = consecutiveRolls[1];
        consecutiveRolls[1] = consecutiveRolls[2];
        consecutiveRolls[2] = diceValue;
    }

    void updateColor() {
        if (points > 11) {
            pointColor = "purple";
        } else if (points > 5) {
            pointColor = "yellow";
        }
    }

    void resetPoints() {
        points = 0;
    }
}

class Game {
    List<Player> players;
    List<Integer> turnOrder;
    int turnCount;
    boolean gameOver;

    Game() {
        players = new ArrayList<>();
        turnOrder = new ArrayList<>();
        turnCount = 0;
        gameOver = false;
    }

    void initializeGame() {
        Scanner scanner = new Scanner(System.in);
        for (int i = 0; i < 3; i++) {
            System.out.println("Enter name for player " + (i + 1) + ":");
            String name = scanner.nextLine();
            while (name.equalsIgnoreCase("Computer")) {
                System.out.println("Name cannot be Computer. Enter another name:");
                name = scanner.nextLine();
            }
            Player player = new Player(name);
            if (i == 0) player.pointColor = "red";
            if (i == 1) player.pointColor = "green";
            if (i == 2) player.pointColor = "blue";
            players.add(player);
        }
        turnOrder.add(0);
        turnOrder.add(1);
        turnOrder.add(2);
        Collections.shuffle(turnOrder);
    }

    void manageTurn() {
        Scanner scanner = new Scanner(System.in);
        while (!gameOver && turnCount < 12) {
            int currentPlayerIndex = turnOrder.get(turnCount % 3);
            Player currentPlayer = players.get(currentPlayerIndex);
            System.out.println(currentPlayer.name + "'s turn. Current points: " + currentPlayer.points);
            System.out.println("Would you like to skip?");
            String skip = scanner.nextLine();
            if (skip.equalsIgnoreCase("yes")) {
                turnCount++;
                continue;
            }
            int diceValue = rollDice();
            System.out.println("Dice rolled: " + diceValue);
            if (diceValue == 1) {
                System.out.println("Would you like to re-roll?");
                String reroll = scanner.nextLine();
                if (reroll.equalsIgnoreCase("yes")) {
                    diceValue = rollDice();
                    System.out.println("Re-rolled dice: " + diceValue);
                }
            }
            if (diceValue == 5) {
                int secondRoll = rollDice();
                System.out.println("Rolled a 5, rolling again: " + secondRoll);
                diceValue *= secondRoll;
            }
            currentPlayer.updatePoints(diceValue);
            System.out.println(currentPlayer.name + " now has " + currentPlayer.points + " points.");
            if (diceValue == 6) {
                System.out.println("Next player's turn is skipped.");
                turnCount++;
            }
            checkGameEndConditions();
            turnCount++;
        }
        declareWinner();
    }

    int rollDice() {
        return new Random().nextInt(6) + 1;
    }

    boolean checkGameEndConditions() {
        for (Player player : players) {
            if (player.points >= 10) {
                boolean hasMoreThanTenPoints = true;
                for (Player otherPlayer : players) {
                    if (otherPlayer != player && player.points - otherPlayer.points < 10) {
                        hasMoreThanTenPoints = false;
                        break;
                    }
                }
                if (hasMoreThanTenPoints) {
                    gameOver = true;
                    return true;
                }
            }
        }
        return false;
    }

    void declareWinner() {
        Player winner = players.get(0);
        for (Player player : players) {
            if (player.points > winner.points) {
                winner = player;
            }
        }
        System.out.println("Congratulations " + winner.name + " you won the game! You are the best!");
        for (Player player : players) {
            System.out.println(player.name + " has " + player.points + " points.");
        }
    }

    void displayEquality() {
        if (players.get(0).points == players.get(1).points || players.get(1).points == players.get(2).points || players.get(0).points == players.get(2).points) {
            System.out.println("Equality!");
        }
    }

    void prepareForNextGame() {
        players.sort((p1, p2) -> Integer.compare(p2.points, p1.points));
        turnOrder.clear();
        for (int i = 0; i < players.size(); i++) {
            turnOrder.add(i);
        }
    }
}

public class DiceGame {
    public static void main(String[] args) {
        Game game = new Game();
        game.initializeGame();
        game.manageTurn();
    }
}
```

This code implements the dice game with all the specified requirements. The game initializes with three players, manages turns, handles special conditions, and declares a winner based on the rules provided.