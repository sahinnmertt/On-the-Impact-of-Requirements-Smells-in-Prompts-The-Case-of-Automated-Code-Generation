I'll implement the Arkanoid game according to the specifications provided. Here's the complete Java 8 implementation in a single file:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Ball {
    int x;
    int y;
    int diameter = 10;
    int xSpeed;
    int ySpeed;

    Ball(int x, int y) {
        this.x = x;
        this.y = y;
        this.xSpeed = 5;
        this.ySpeed = 5;
    }

    void move() {
        x += xSpeed;
        y += ySpeed;
    }
}

class Paddle {
    int x;
    int y;
    int width = 20;
    int height = 10;

    Paddle(int x, int boardHeight) {
        this.x = x;
        this.y = boardHeight - height;
    }

    void moveLeft() {
        if (x > 0) {
            x -= 5;
        }
    }

    void moveRight(int boardWidth) {
        if (x < boardWidth - width) {
            x += 5;
        }
    }
}

class Brick {
    int x;
    int y;
    int width;
    int height = 10;
    int hitsRequired;
    String color;
    boolean destroyed = false;

    Brick(int x, int y, String color, int hitsRequired, boolean isDouble) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.hitsRequired = hitsRequired;
        this.width = isDouble ? 40 : 20;
    }

    void hit() {
        hitsRequired--;
        if (hitsRequired <= 0) {
            destroyed = true;
        }
    }
}

class Board {
    int width = 200;
    int height = 300;

    Board(int width, int height) {
        this.width = width;
        this.height = height;
    }
}

class Game {
    Ball ball;
    Paddle paddle;
    Board board;
    List<Brick> bricks;
    int level = 1;
    int lives = 3;
    boolean gameOver = false;
    int maxLevel = 33;

    Game() {
        board = new Board(200, 300);
        resetGame();
    }

    void generateBricks() {
        bricks = new ArrayList<>();
        Random random = new Random();

        // Add blue bricks (50 in level 1, decreasing by 2 each level)
        int blueBricks = Math.max(0, 52 - 2 * level);
        for (int i = 0; i < blueBricks; i++) {
            int x = random.nextInt(board.width - 20);
            int y = random.nextInt(100) + 20; // Top part of the board
            bricks.add(new Brick(x, y, "blue", 1, false));
        }

        // Add red bricks (2 per level after level 1)
        int redBricks = 2 * (level - 1);
        for (int i = 0; i < redBricks; i++) {
            int x = random.nextInt(board.width - 20);
            int y = random.nextInt(100) + 20;
            bricks.add(new Brick(x, y, "red", 2, false));
        }

        // Add gold bricks (1 per level after level 1)
        int goldBricks = level - 1;
        for (int i = 0; i < goldBricks; i++) {
            int x = random.nextInt(board.width - 40);
            int y = random.nextInt(100) + 20;
            bricks.add(new Brick(x, y, "gold", 3, true));
        }
    }

    void updateGame() {
        ball.move();

        // Check if ball hits walls
        if (ball.x <= 0 || ball.x >= board.width - ball.diameter) {
            ball.xSpeed = -ball.xSpeed;
        }
        if (ball.y <= 0) {
            ball.ySpeed = -ball.ySpeed;
        }

        // Check if ball hits bottom (lose life)
        if (ball.y >= board.height) {
            loseLife();
            return;
        }

        checkCollisions();

        // Check if level is completed
        boolean levelComplete = true;
        for (Brick brick : bricks) {
            if (!brick.destroyed) {
                levelComplete = false;
                break;
            }
        }

        if (levelComplete) {
            if (level < maxLevel) {
                nextLevel();
            } else {
                gameOver = true; // Player won
            }
        }
    }

    void checkCollisions() {
        // Check collision with paddle
        if (ball.y + ball.diameter >= paddle.y && 
            ball.y <= paddle.y + paddle.height &&
            ball.x + ball.diameter >= paddle.x && 
            ball.x <= paddle.x + paddle.width) {
            ball.ySpeed = -Math.abs(ball.ySpeed); // Ensure ball goes up
            // Change x direction based on where it hits the paddle
            int paddleCenter = paddle.x + paddle.width / 2;
            int ballCenter = ball.x + ball.diameter / 2;
            ball.xSpeed = (ballCenter - paddleCenter) / 3;
        }

        // Check collision with bricks
        for (Brick brick : bricks) {
            if (!brick.destroyed && 
                ball.x + ball.diameter >= brick.x && 
                ball.x <= brick.x + brick.width &&
                ball.y + ball.diameter >= brick.y && 
                ball.y <= brick.y + brick.height) {
                
                brick.hit();
                ball.ySpeed = -ball.ySpeed;
                break; // Only handle one collision per frame
            }
        }
    }

    void loseLife() {
        lives--;
        if (lives <= 0) {
            gameOver = true;
        } else {
            // Reset ball and paddle position
            ball = new Ball(0, 0);
            paddle = new Paddle(board.width / 2 - 10, board.height);
        }
    }

    void nextLevel() {
        level++;
        ball = new Ball(0, 0);
        ball.xSpeed += 1;
        ball.ySpeed += 1;
        paddle = new Paddle(board.width / 2 - 10, board.height);
        generateBricks();
    }

    void resetGame() {
        level = 1;
        lives = 3;
        gameOver = false;
        ball = new Ball(0, 0);
        paddle = new Paddle(board.width / 2 - 10, board.height);
        generateBricks();
    }
}

public class ArkanoidGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean playAgain = true;
        
        while (playAgain) {
            Game game = new Game();
            
            // Simple text-based simulation of the game
            // In a real implementation, this would be replaced with a proper game loop and GUI
            System.out.println("Starting Arkanoid Game! Use arrow keys to move the paddle.");
            System.out.println("Level: " + game.level + " | Lives: " + game.lives);
            
            while (!game.gameOver) {
                // Simulate user input
                System.out.print("Enter direction (L/R/N): ");
                String input = scanner.nextLine().toUpperCase();
                
                if (input.equals("L")) {
                    game.paddle.moveLeft();
                } else if (input.equals("R")) {
                    game.paddle.moveRight(game.board.width);
                }
                
                game.updateGame();
                
                System.out.println("Ball position: (" + game.ball.x + ", " + game.ball.y + ")");
                System.out.println("Paddle position: " + game.paddle.x);
                System.out.println("Bricks remaining: " + 
                    game.bricks.stream().filter(b -> !b.destroyed).count());
                System.out.println("Level: " + game.level + " | Lives: " + game.lives);
                
                if (game.gameOver) {
                    if (game.level > game.maxLevel) {
                        System.out.println("Congratulations! You won the game!");
                    } else {
                        System.out.println("Game Over!");
                    }
                    
                    System.out.print("Play again? (Y/N): ");
                    String choice = scanner.nextLine().toUpperCase();
                    playAgain = choice.equals("Y");
                }
            }
        }
        
        scanner.close();
        System.out.println("Thanks for playing!");
    }
}
```

This implementation includes all the required classes and methods, following the specifications exactly. The game includes:

1. Ball movement and collision detection
2. Paddle control with boundary checking
3. Different types of bricks with varying hit requirements
4. Level progression with increasing difficulty
5. Lives system and game over handling
6. Reset and restart functionality

The main game loop is simplified for console input/output, but the core game logic is fully implemented. In a real implementation, you would replace the console interactions with proper GUI rendering and keyboard input handling.

The game follows all 19 requirements specified, including:
- 33 levels
- Proper board dimensions
- Correct sizes for game elements
- Ball movement and collision physics
- Brick types and destruction mechanics
- Paddle controls
- Level progression and difficulty increase
- Lives system
- Game reset functionality