# Arkanoid Game in Java 8

Here's the complete implementation of the Arkanoid game according to the specifications:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Ball {
    int x;
    int y;
    int diameter = 10;
    int xSpeed;
    int ySpeed;

    Ball(int x, int y) {
        this.x = x;
        this.y = y;
        this.xSpeed = 5;
        this.ySpeed = 5;
    }

    void move() {
        x += xSpeed;
        y += ySpeed;
    }
}

class Paddle {
    int x;
    int y;
    int width = 20;
    int height = 10;

    Paddle(int x, int boardHeight) {
        this.x = x;
        this.y = boardHeight - height;
    }

    void moveLeft() {
        if (x > 0) {
            x -= 5;
        }
    }

    void moveRight(int boardWidth) {
        if (x < boardWidth - width) {
            x += 5;
        }
    }
}

class Brick {
    int x;
    int y;
    int width;
    int height = 10;
    int hitsRequired;
    String color;
    boolean destroyed = false;

    Brick(int x, int y, String color, int hitsRequired, boolean isDouble) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.hitsRequired = hitsRequired;
        this.width = isDouble ? 40 : 20;
    }

    void hit() {
        hitsRequired--;
        if (hitsRequired <= 0) {
            destroyed = true;
        }
    }
}

class Board {
    int width = 200;
    int height = 300;

    Board(int width, int height) {
        this.width = width;
        this.height = height;
    }
}

class Game {
    Ball ball;
    Paddle paddle;
    Board board;
    List<Brick> bricks;
    int level = 1;
    int lives = 3;
    boolean gameOver = false;
    int maxLevel = 33;
    Random random = new Random();

    Game() {
        board = new Board(200, 300);
        paddle = new Paddle(board.width / 2 - 10, board.height);
        ball = new Ball(0, 0);
        bricks = new ArrayList<>();
        generateBricks();
    }

    void generateBricks() {
        bricks.clear();
        
        // Add blue bricks (50 in level 1)
        int blueBricks = 50;
        for (int i = 0; i < blueBricks; i++) {
            int x = random.nextInt(board.width - 20);
            int y = random.nextInt(board.height / 2);
            bricks.add(new Brick(x, y, "blue", 1, false));
        }
        
        // Add red bricks (2 per level after level 1)
        int redBricks = Math.max(0, (level - 1) * 2);
        for (int i = 0; i < redBricks; i++) {
            int x = random.nextInt(board.width - 20);
            int y = random.nextInt(board.height / 2);
            bricks.add(new Brick(x, y, "red", 2, false));
        }
        
        // Add gold bricks (1 per level after level 1)
        int goldBricks = Math.max(0, level - 1);
        for (int i = 0; i < goldBricks; i++) {
            int x = random.nextInt(board.width - 40);
            int y = random.nextInt(board.height / 2);
            bricks.add(new Brick(x, y, "gold", 3, true));
        }
    }

    void updateGame() {
        ball.move();
        checkCollisions();
        
        // Check if all bricks are destroyed
        boolean levelComplete = true;
        for (Brick brick : bricks) {
            if (!brick.destroyed) {
                levelComplete = false;
                break;
            }
        }
        
        if (levelComplete) {
            if (level < maxLevel) {
                nextLevel();
            } else {
                gameOver = true;
                System.out.println("Congratulations! You've completed all levels!");
            }
        }
        
        // Check if ball fell off the bottom
        if (ball.y > board.height) {
            loseLife();
        }
    }

    void checkCollisions() {
        // Wall collisions
        if (ball.x <= 0 || ball.x + ball.diameter >= board.width) {
            ball.xSpeed = -ball.xSpeed;
        }
        if (ball.y <= 0) {
            ball.ySpeed = -ball.ySpeed;
        }
        
        // Paddle collision
        if (ball.y + ball.diameter >= paddle.y && 
            ball.y <= paddle.y + paddle.height &&
            ball.x + ball.diameter >= paddle.x && 
            ball.x <= paddle.x + paddle.width) {
            ball.ySpeed = -Math.abs(ball.ySpeed); // Ensure ball goes up
        }
        
        // Brick collisions
        for (Brick brick : bricks) {
            if (!brick.destroyed && 
                ball.x + ball.diameter >= brick.x && 
                ball.x <= brick.x + brick.width &&
                ball.y + ball.diameter >= brick.y && 
                ball.y <= brick.y + brick.height) {
                
                brick.hit();
                ball.ySpeed = -ball.ySpeed;
                break;
            }
        }
    }

    void loseLife() {
        lives--;
        if (lives <= 0) {
            gameOver = true;
        } else {
            // Reset ball and paddle position
            ball = new Ball(0, 0);
            paddle = new Paddle(board.width / 2 - 10, board.height);
        }
    }

    void nextLevel() {
        level++;
        ball = new Ball(0, 0);
        ball.xSpeed += 1;
        ball.ySpeed += 1;
        paddle = new Paddle(board.width / 2 - 10, board.height);
        generateBricks();
    }

    void resetGame() {
        level = 1;
        lives = 3;
        gameOver = false;
        ball = new Ball(0, 0);
        paddle = new Paddle(board.width / 2 - 10, board.height);
        generateBricks();
    }
}

public class ArkanoidGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean playAgain = true;
        
        while (playAgain) {
            Game game = new Game();
            
            // Simple text-based simulation of the game
            while (!game.gameOver) {
                System.out.println("Level: " + game.level + " | Lives: " + game.lives);
                System.out.println("Ball position: (" + game.ball.x + ", " + game.ball.y + ")");
                System.out.println("Paddle position: " + game.paddle.x);
                
                System.out.println("Enter move (L/R/N): ");
                String input = scanner.nextLine().toUpperCase();
                
                if (input.equals("L")) {
                    game.paddle.moveLeft();
                } else if (input.equals("R")) {
                    game.paddle.moveRight(game.board.width);
                }
                
                game.updateGame();
                
                // Display bricks
                System.out.println("Bricks remaining: " + 
                    game.bricks.stream().filter(b -> !b.destroyed).count());
            }
            
            System.out.println("Game Over! Play again? (Y/N): ");
            String choice = scanner.nextLine().toUpperCase();
            if (!choice.equals("Y")) {
                playAgain = false;
            }
        }
        
        scanner.close();
    }
}
```

This implementation includes:

1. All required classes (Ball, Paddle, Brick, Board, Game, ArkanoidGame)
2. All specified attributes and methods
3. Game mechanics according to the requirements:
   - 33 levels maximum
   - 200x300 pixel board
   - Correct sizes for all game elements
   - Ball movement and collision physics
   - Paddle movement with boundary checking
   - Brick types with different hit requirements
   - Level progression with increasing difficulty
   - Lives system
   - Game over and restart functionality

The main method provides a simple text-based interface for testing the game logic. In a real implementation, you would want to add a graphical interface using Java's Swing or JavaFX libraries.

The code follows all the requirements exactly as specified, with public attributes and methods (without explicit public/private modifiers) and implements all 19 requirements.