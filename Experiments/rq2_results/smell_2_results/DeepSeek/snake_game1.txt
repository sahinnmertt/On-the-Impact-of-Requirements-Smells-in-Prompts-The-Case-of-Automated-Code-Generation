# Snake Game in Java 8

Here's a complete implementation of the Snake game according to all the specified requirements:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Coordinates {
    int x;
    int y;
    
    Coordinates(int x, int y) {
        this.x = x;
        this.y = y;
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Coordinates that = (Coordinates) obj;
        return x == that.x && y == that.y;
    }
}

class Snake {
    List<Coordinates> body;
    String direction;
    double speed;
    int growing;
    String color;
    
    Snake() {
        body = new ArrayList<>();
        body.add(new Coordinates(0, 0));
        direction = "UP";
        color = "GREEN";
        growing = 0;
    }
    
    void move() {
        Coordinates head = body.get(0);
        Coordinates newHead;
        
        switch (direction) {
            case "UP":
                newHead = new Coordinates(head.x, head.y - 1);
                break;
            case "DOWN":
                newHead = new Coordinates(head.x, head.y + 1);
                break;
            case "LEFT":
                newHead = new Coordinates(head.x - 1, head.y);
                break;
            case "RIGHT":
                newHead = new Coordinates(head.x + 1, head.y);
                break;
            default:
                newHead = new Coordinates(head.x, head.y - 1);
        }
        
        body.add(0, newHead);
        
        if (growing > 0) {
            growing--;
        } else {
            body.remove(body.size() - 1);
        }
    }
    
    void grow(int amount) {
        growing += amount;
    }
    
    void increaseSpeed() {
        speed *= 1.01;
    }
    
    void decreaseSpeed() {
        speed *= 0.95;
    }
}

class Food {
    Coordinates position;
    String color;
    
    Food(String color) {
        this.color = color;
    }
    
    void generateNewPosition(int boardSize) {
        Random random = new Random();
        position = new Coordinates(random.nextInt(boardSize), random.nextInt(boardSize));
    }
}

class Board {
    int size;
    int blockSize;
    
    Board(int k) {
        size = k;
        blockSize = 500 / k; // Assuming a 500px board for visualization purposes
    }
    
    void render(Snake snake, Food food, Food bonusFood) {
        System.out.println("\nCurrent Board:");
        for (int y = 0; y < size; y++) {
            for (int x = 0; x < size; x++) {
                Coordinates current = new Coordinates(x, y);
                if (snake.body.contains(current)) {
                    System.out.print("S ");
                } else if (food.position != null && food.position.equals(current)) {
                    System.out.print("F ");
                } else if (bonusFood != null && bonusFood.position != null && bonusFood.position.equals(current)) {
                    System.out.print("B ");
                } else {
                    System.out.print(". ");
                }
            }
            System.out.println();
        }
    }
}

class Game {
    Snake snake;
    Food food;
    Food bonusFood;
    boolean paused;
    String difficulty;
    int time;
    boolean gameOver;
    Board board;
    int foodEaten;
    
    Game(int boardSize, String difficulty) {
        board = new Board(boardSize);
        snake = new Snake();
        food = new Food("RED");
        food.generateNewPosition(boardSize);
        bonusFood = null;
        paused = false;
        this.difficulty = difficulty;
        time = 0;
        gameOver = false;
        foodEaten = 0;
        
        if (difficulty.equalsIgnoreCase("easy")) {
            snake.speed = 0.5;
        } else {
            snake.speed = 1.0;
        }
    }
    
    void updateGame() {
        if (paused || gameOver) return;
        
        snake.move();
        time++;
        
        // Check if snake ate food
        if (snake.body.get(0).equals(food.position)) {
            snake.grow(1);
            snake.increaseSpeed();
            food.generateNewPosition(board.size);
            foodEaten++;
            
            // Check for bonus food spawn
            if (foodEaten % 5 == 0) {
                spawnBonusFood("BLUE");
            }
            
            // Random chance for golden food
            if (Math.random() < 0.1) {
                spawnBonusFood("GOLD");
            }
        }
        
        // Check if snake ate bonus food
        if (bonusFood != null && bonusFood.position != null && 
            snake.body.get(0).equals(bonusFood.position)) {
            if (bonusFood.color.equals("BLUE")) {
                snake.grow(3);
            } else if (bonusFood.color.equals("GOLD")) {
                snake.decreaseSpeed();
            }
            bonusFood = null;
        }
        
        checkCollisions();
        
        // Remove bonus food after some time
        if (bonusFood != null && time % 20 == 0) {
            bonusFood = null;
        }
    }
    
    void checkCollisions() {
        Coordinates head = snake.body.get(0);
        
        // Check wall collision
        if (head.x < 0 || head.x >= board.size || head.y < 0 || head.y >= board.size) {
            gameOver = true;
            return;
        }
        
        // Check self collision
        for (int i = 1; i < snake.body.size(); i++) {
            if (head.equals(snake.body.get(i))) {
                gameOver = true;
                return;
            }
        }
    }
    
    void handleKeyPress(char key) {
        switch (Character.toUpperCase(key)) {
            case 'P':
                paused = !paused;
                break;
            case 'W':
                if (!snake.direction.equals("DOWN")) snake.direction = "UP";
                break;
            case 'S':
                if (!snake.direction.equals("UP")) snake.direction = "DOWN";
                break;
            case 'A':
                if (!snake.direction.equals("RIGHT")) snake.direction = "LEFT";
                break;
            case 'D':
                if (!snake.direction.equals("LEFT")) snake.direction = "RIGHT";
                break;
        }
    }
    
    void spawnBonusFood(String foodColor) {
        bonusFood = new Food(foodColor);
        bonusFood.generateNewPosition(board.size);
    }
    
    void resetGame() {
        snake = new Snake();
        food = new Food("RED");
        food.generateNewPosition(board.size);
        bonusFood = null;
        paused = false;
        gameOver = false;
        foodEaten = 0;
        
        if (difficulty.equalsIgnoreCase("easy")) {
            snake.speed = 0.5;
        } else {
            snake.speed = 1.0;
        }
    }
}

public class SnakeGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Welcome to Snake Game!");
        System.out.print("Enter board size (k for k x k board): ");
        int boardSize = scanner.nextInt();
        
        System.out.print("Enter difficulty (easy/hard): ");
        String difficulty = scanner.next();
        
        Game game = new Game(boardSize, difficulty);
        
        System.out.println("\nControls:");
        System.out.println("W - Move Up");
        System.out.println("S - Move Down");
        System.out.println("A - Move Left");
        System.out.println("D - Move Right");
        System.out.println("P - Pause/Resume");
        System.out.println("\nStarting game...");
        
        // Simple console-based game loop
        while (true) {
            if (!game.gameOver) {
                game.board.render(game.snake, game.food, game.bonusFood);
                System.out.println("Score: " + (game.snake.body.size() - 1));
                System.out.println("Speed: " + game.snake.speed);
                System.out.println("Time: " + game.time);
                
                if (game.paused) {
                    System.out.println("Game Paused - Press P to resume");
                } else {
                    System.out.print("Enter move (W/A/S/D) or P to pause: ");
                    String input = scanner.next();
                    game.handleKeyPress(input.charAt(0));
                }
                
                game.updateGame();
                
                try {
                    // Adjust sleep time based on snake speed
                    long sleepTime = (long) (1000 / game.snake.speed);
                    Thread.sleep(sleepTime);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else {
                System.out.println("\nGame Over!");
                System.out.println("Final Score: " + (game.snake.body.size() - 1));
                System.out.print("Play again? (Y/N): ");
                String choice = scanner.next();
                if (choice.equalsIgnoreCase("Y")) {
                    game.resetGame();
                } else {
                    break;
                }
            }
        }
        
        scanner.close();
    }
}
```

This implementation includes:

1. All required classes (Snake, Food, Board, Coordinates, Game, SnakeGame)
2. All specified methods and attributes
3. Complete game functionality including:
   - Snake movement and growth
   - Food spawning and eating
   - Collision detection (walls and self)
   - Difficulty levels
   - Speed adjustments
   - Bonus food (blue and golden)
   - Pause functionality
   - Game reset

The game uses console output for visualization, with:
- 'S' representing the snake
- 'F' representing regular food
- 'B' representing bonus food
- '.' representing empty spaces

Controls are handled through keyboard input (WASD for movement, P for pause). The game loop adjusts speed based on the snake's current speed value.

All requirements from 1-14 are implemented exactly as specified in the problem statement.