# Snake Game in Java 8

Here's a complete implementation of the Snake game according to your specifications:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Coordinates {
    int x;
    int y;
    
    Coordinates(int x, int y) {
        this.x = x;
        this.y = y;
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Coordinates that = (Coordinates) obj;
        return x == that.x && y == that.y;
    }
}

class Snake {
    List<Coordinates> body;
    String direction;
    double speed;
    int growing;
    String color;
    
    Snake() {
        body = new ArrayList<>();
        body.add(new Coordinates(0, 0));
        direction = "UP";
        speed = 0.5;
        growing = 0;
        color = "GREEN";
    }
    
    void move() {
        Coordinates head = body.get(0);
        Coordinates newHead;
        
        switch (direction) {
            case "UP":
                newHead = new Coordinates(head.x, head.y - 1);
                break;
            case "DOWN":
                newHead = new Coordinates(head.x, head.y + 1);
                break;
            case "LEFT":
                newHead = new Coordinates(head.x - 1, head.y);
                break;
            case "RIGHT":
                newHead = new Coordinates(head.x + 1, head.y);
                break;
            default:
                newHead = new Coordinates(head.x, head.y - 1);
        }
        
        body.add(0, newHead);
        
        if (growing > 0) {
            growing--;
        } else {
            body.remove(body.size() - 1);
        }
    }
    
    void grow(int amount) {
        growing += amount;
    }
    
    void increaseSpeed() {
        speed *= 1.01;
    }
    
    void decreaseSpeed() {
        speed *= 0.95;
    }
}

class Food {
    Coordinates position;
    String color;
    
    Food(String color) {
        this.color = color;
        generateNewPosition(10); // Default size, will be updated
    }
    
    void generateNewPosition(int boardSize) {
        Random random = new Random();
        position = new Coordinates(random.nextInt(boardSize), random.nextInt(boardSize));
    }
}

class Board {
    int size;
    int blockSize;
    
    Board(int k) {
        this.size = k;
        this.blockSize = 20; // Fixed block size for rendering
    }
    
    void render(Snake snake, Food food, Food bonusFood) {
        // Clear the console (simplified for this example)
        System.out.print("\033[H\033[2J");
        System.out.flush();
        
        // Draw the board
        for (int y = 0; y < size; y++) {
            for (int x = 0; x < size; x++) {
                Coordinates current = new Coordinates(x, y);
                if (snake.body.contains(current)) {
                    System.out.print("S ");
                } else if (food.position.equals(current)) {
                    System.out.print("F ");
                } else if (bonusFood != null && bonusFood.position.equals(current)) {
                    System.out.print("B ");
                } else {
                    System.out.print(". ");
                }
            }
            System.out.println();
        }
        
        // Display game info
        System.out.println("Length: " + snake.body.size());
        System.out.println("Speed: " + String.format("%.2f", snake.speed));
    }
}

class Game {
    Snake snake;
    Food food;
    Food bonusFood;
    boolean paused;
    String difficulty;
    int time;
    boolean gameOver;
    Board board;
    int foodEaten;
    
    Game(int boardSize, String difficulty) {
        this.board = new Board(boardSize);
        this.snake = new Snake();
        this.food = new Food("RED");
        this.food.generateNewPosition(boardSize);
        this.bonusFood = null;
        this.paused = false;
        this.difficulty = difficulty;
        this.time = 0;
        this.gameOver = false;
        this.foodEaten = 0;
        
        if (difficulty.equals("easy")) {
            snake.speed = 0.5;
        } else {
            snake.speed = 1.0;
        }
    }
    
    void updateGame() {
        if (paused || gameOver) return;
        
        time++;
        
        // Move snake
        snake.move();
        
        // Check collisions
        checkCollisions();
        
        // Spawn bonus food if needed
        if (foodEaten > 0 && foodEaten % 5 == 0 && bonusFood == null) {
            spawnBonusFood("BLUE");
        }
        
        // Random chance for golden food
        if (time % 30 == 0 && new Random().nextInt(10) < 3 && bonusFood == null) {
            spawnBonusFood("GOLD");
        }
        
        // Render the board
        board.render(snake, food, bonusFood);
    }
    
    void checkCollisions() {
        Coordinates head = snake.body.get(0);
        
        // Check wall collision
        if (head.x < 0 || head.x >= board.size || head.y < 0 || head.y >= board.size) {
            gameOver = true;
            System.out.println("Game Over! Hit the wall.");
            return;
        }
        
        // Check self collision
        for (int i = 1; i < snake.body.size(); i++) {
            if (head.equals(snake.body.get(i))) {
                gameOver = true;
                System.out.println("Game Over! Hit yourself.");
                return;
            }
        }
        
        // Check food collision
        if (head.equals(food.position)) {
            snake.grow(1);
            snake.increaseSpeed();
            food.generateNewPosition(board.size);
            foodEaten++;
        }
        
        // Check bonus food collision
        if (bonusFood != null && head.equals(bonusFood.position)) {
            if (bonusFood.color.equals("BLUE")) {
                snake.grow(3);
            } else if (bonusFood.color.equals("GOLD")) {
                snake.decreaseSpeed();
            }
            bonusFood = null;
        }
    }
    
    void handleKeyPress(char key) {
        switch (Character.toLowerCase(key)) {
            case 'p':
                paused = !paused;
                break;
            case 'w':
                if (!snake.direction.equals("DOWN")) snake.direction = "UP";
                break;
            case 's':
                if (!snake.direction.equals("UP")) snake.direction = "DOWN";
                break;
            case 'a':
                if (!snake.direction.equals("RIGHT")) snake.direction = "LEFT";
                break;
            case 'd':
                if (!snake.direction.equals("LEFT")) snake.direction = "RIGHT";
                break;
        }
    }
    
    void spawnBonusFood(String foodColor) {
        bonusFood = new Food(foodColor);
        bonusFood.generateNewPosition(board.size);
    }
    
    void resetGame() {
        snake = new Snake();
        food = new Food("RED");
        food.generateNewPosition(board.size);
        bonusFood = null;
        gameOver = false;
        foodEaten = 0;
        
        if (difficulty.equals("easy")) {
            snake.speed = 0.5;
        } else {
            snake.speed = 1.0;
        }
    }
}

public class SnakeGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter board size (10-20): ");
        int boardSize = scanner.nextInt();
        
        System.out.print("Enter difficulty (easy/hard): ");
        String difficulty = scanner.next().toLowerCase();
        
        while (!difficulty.equals("easy") && !difficulty.equals("hard")) {
            System.out.print("Invalid difficulty. Enter easy or hard: ");
            difficulty = scanner.next().toLowerCase();
        }
        
        Game game = new Game(boardSize, difficulty);
        
        // Simple game loop (in a real implementation, you'd use proper threading)
        while (true) {
            if (System.in.available() > 0) {
                char key = (char) System.in.read();
                game.handleKeyPress(key);
                
                if (game.gameOver && Character.toLowerCase(key) == 'r') {
                    game.resetGame();
                }
            }
            
            game.updateGame();
            
            try {
                // Adjust sleep time based on snake speed
                long sleepTime = (long) (1000 / game.snake.speed);
                Thread.sleep(sleepTime);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
```

This implementation includes all the required classes and methods, and fulfills all 14 requirements:

1. Snake grows by eating food
2. Snake eats food when passing over it
3. Snake grows by one block when eating normal food
4. Game ends if snake hits wall
5. Game ends if snake hits itself
6. Board size is configurable by user
7. Initial snake and food positions set correctly
8. Snake direction controlled by keyboard (WASD keys)
9. New food spawns randomly after eating
10. Speed increases by 1% after eating food
11. Difficulty levels (easy/hard) affect initial speed
12. Blue bonus food appears periodically and adds 3 blocks
13. Golden bonus food appears randomly and decreases speed by 5%
14. Game can be paused with 'p' key

Note that this is a console-based implementation. For a graphical version, you would need to use a GUI library like JavaFX or Swing. The game controls are:
- W: Up
- A: Left
- S: Down
- D: Right
- P: Pause
- R: Restart after game over