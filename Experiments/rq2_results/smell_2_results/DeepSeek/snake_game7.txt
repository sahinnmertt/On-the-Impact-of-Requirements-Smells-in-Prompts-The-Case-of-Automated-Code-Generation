# Snake Game in Java 8

Here's a complete implementation of the Snake game according to all the specified requirements:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Coordinates {
    int x;
    int y;
    
    Coordinates(int x, int y) {
        this.x = x;
        this.y = y;
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Coordinates that = (Coordinates) obj;
        return x == that.x && y == that.y;
    }
}

class Snake {
    List<Coordinates> body;
    String direction;
    double speed;
    int growing;
    String color;
    
    Snake() {
        body = new ArrayList<>();
        body.add(new Coordinates(0, 0));
        direction = "UP";
        speed = 0.5;
        growing = 0;
        color = "GREEN";
    }
    
    void move() {
        Coordinates head = body.get(0);
        Coordinates newHead;
        
        switch (direction) {
            case "UP":
                newHead = new Coordinates(head.x, head.y - 1);
                break;
            case "DOWN":
                newHead = new Coordinates(head.x, head.y + 1);
                break;
            case "LEFT":
                newHead = new Coordinates(head.x - 1, head.y);
                break;
            case "RIGHT":
                newHead = new Coordinates(head.x + 1, head.y);
                break;
            default:
                newHead = new Coordinates(head.x, head.y - 1);
        }
        
        body.add(0, newHead);
        
        if (growing > 0) {
            growing--;
        } else {
            body.remove(body.size() - 1);
        }
    }
    
    void grow(int amount) {
        growing += amount;
    }
    
    void increaseSpeed() {
        speed *= 1.01;
    }
    
    void decreaseSpeed() {
        speed *= 0.95;
    }
}

class Food {
    Coordinates position;
    String color;
    
    Food(String color) {
        this.color = color;
        generateNewPosition(10); // Default size, will be updated
    }
    
    void generateNewPosition(int boardSize) {
        Random random = new Random();
        position = new Coordinates(random.nextInt(boardSize), random.nextInt(boardSize));
    }
}

class Board {
    int size;
    int blockSize;
    
    Board(int k) {
        this.size = k;
        this.blockSize = 20; // Fixed block size for rendering
    }
    
    void render(Snake snake, Food food, Food bonusFood) {
        // Clear console (simplified for this implementation)
        System.out.print("\033[H\033[2J");
        System.out.flush();
        
        // Draw board
        for (int y = 0; y < size; y++) {
            for (int x = 0; x < size; x++) {
                Coordinates current = new Coordinates(x, y);
                if (snake.body.contains(current)) {
                    System.out.print("S ");
                } else if (food.position.equals(current)) {
                    System.out.print("F ");
                } else if (bonusFood != null && bonusFood.position.equals(current)) {
                    System.out.print("B ");
                } else {
                    System.out.print(". ");
                }
            }
            System.out.println();
        }
        
        // Display game info
        System.out.println("Snake length: " + snake.body.size());
        System.out.println("Speed: " + String.format("%.2f", snake.speed));
    }
}

class Game {
    Snake snake;
    Food food;
    Food bonusFood;
    boolean paused;
    String difficulty;
    int time;
    boolean gameOver;
    Board board;
    int foodEaten;
    
    Game(int boardSize, String difficulty) {
        this.board = new Board(boardSize);
        this.snake = new Snake();
        this.food = new Food("RED");
        this.food.generateNewPosition(boardSize);
        this.bonusFood = null;
        this.paused = false;
        this.difficulty = difficulty;
        this.time = 0;
        this.gameOver = false;
        this.foodEaten = 0;
        
        if (difficulty.equalsIgnoreCase("hard")) {
            snake.speed = 1.0;
        }
    }
    
    void updateGame() {
        if (paused || gameOver) return;
        
        snake.move();
        
        // Check if snake ate food
        if (snake.body.get(0).equals(food.position)) {
            snake.grow(1);
            snake.increaseSpeed();
            food.generateNewPosition(board.size);
            foodEaten++;
            
            // Check for bonus food spawn
            if (foodEaten % 5 == 0) {
                spawnBonusFood("BLUE");
            }
            
            // Random chance for golden bonus
            if (new Random().nextInt(10) == 0) {
                spawnBonusFood("GOLD");
            }
        }
        
        // Check if snake ate bonus food
        if (bonusFood != null && snake.body.get(0).equals(bonusFood.position)) {
            if (bonusFood.color.equals("BLUE")) {
                snake.grow(3);
            } else if (bonusFood.color.equals("GOLD")) {
                snake.decreaseSpeed();
            }
            bonusFood = null;
        }
        
        checkCollisions();
        time++;
    }
    
    void checkCollisions() {
        Coordinates head = snake.body.get(0);
        
        // Check wall collision
        if (head.x < 0 || head.x >= board.size || head.y < 0 || head.y >= board.size) {
            gameOver = true;
            return;
        }
        
        // Check self collision
        for (int i = 1; i < snake.body.size(); i++) {
            if (head.equals(snake.body.get(i))) {
                gameOver = true;
                return;
            }
        }
    }
    
    void handleKeyPress(char key) {
        switch (Character.toUpperCase(key)) {
            case 'P':
                paused = !paused;
                break;
            case 'W':
                if (!snake.direction.equals("DOWN")) snake.direction = "UP";
                break;
            case 'S':
                if (!snake.direction.equals("UP")) snake.direction = "DOWN";
                break;
            case 'A':
                if (!snake.direction.equals("RIGHT")) snake.direction = "LEFT";
                break;
            case 'D':
                if (!snake.direction.equals("LEFT")) snake.direction = "RIGHT";
                break;
        }
    }
    
    void spawnBonusFood(String foodColor) {
        bonusFood = new Food(foodColor);
        bonusFood.generateNewPosition(board.size);
    }
    
    void resetGame() {
        snake = new Snake();
        food = new Food("RED");
        food.generateNewPosition(board.size);
        bonusFood = null;
        paused = false;
        gameOver = false;
        foodEaten = 0;
        
        if (difficulty.equalsIgnoreCase("hard")) {
            snake.speed = 1.0;
        }
    }
}

public class SnakeGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter board size (k x k): ");
        int boardSize = scanner.nextInt();
        scanner.nextLine(); // consume newline
        
        System.out.print("Enter difficulty (easy/hard): ");
        String difficulty = scanner.nextLine();
        
        Game game = new Game(boardSize, difficulty);
        
        // Simple game loop (in a real implementation, you'd use proper threading)
        while (!game.gameOver) {
            game.board.render(game.snake, game.food, game.bonusFood);
            
            if (System.in.available() > 0) {
                char key = (char) System.in.read();
                game.handleKeyPress(key);
            }
            
            game.updateGame();
            
            try {
                long sleepTime = (long) (1000 / game.snake.speed);
                Thread.sleep(sleepTime);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        
        System.out.println("Game Over! Final score: " + game.snake.body.size());
        scanner.close();
    }
}
```

This implementation includes all the required classes and methods, and fulfills all 14 requirements:

1. Snake grows by eating food
2. Snake eats food when touching it
3. Snake grows by one block when eating normal food
4. Game ends if snake hits wall
5. Game ends if snake hits itself
6. Board size is configurable by user
7. Initial snake position and direction
8. Keyboard controls for movement
9. New food spawns randomly after eating
10. Speed increases by 1% after eating
11. Difficulty levels (easy/hard) with different speeds
12. Blue bonus food appears periodically (every 5 foods)
13. Golden bonus food appears randomly (10% chance)
14. Pause functionality with 'P' key

Note that this is a console-based implementation. In a real application, you would typically use a GUI library like Swing or JavaFX for better graphics and input handling. The current implementation uses simple console output and has some limitations with keyboard input handling due to the nature of console applications.