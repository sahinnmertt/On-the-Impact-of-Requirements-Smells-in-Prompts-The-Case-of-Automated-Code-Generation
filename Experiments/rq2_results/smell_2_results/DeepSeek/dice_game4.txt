Here's the complete Java 8 implementation of the dice game with all 25 requirements:

```java
import java.util.*;
import java.util.stream.*;

public class DiceGame {
    public static void main(String[] args) {
        Game game = new Game();
        game.initializeGame();
        Scanner scanner = new Scanner(System.in);
        
        do {
            while (!game.gameOver) {
                game.manageTurn();
                game.checkGameEndConditions();
            }
            
            game.declareWinner();
            
            System.out.println("Would you like to play again? (yes/no)");
            String playAgain = scanner.nextLine().trim().toLowerCase();
            if (playAgain.equals("yes")) {
                game.prepareForNextGame();
                game.gameOver = false;
            } else {
                break;
            }
        } while (true);
        
        scanner.close();
    }
}

class Player {
    String name;
    int points;
    String pointColor;
    int[] consecutiveRolls = new int[3];
    
    Player(String name) {
        this.name = name;
        this.points = 0;
    }
    
    void updatePoints(int diceValue) {
        // Handle consecutive rolls
        consecutiveRolls[0] = consecutiveRolls[1];
        consecutiveRolls[1] = consecutiveRolls[2];
        consecutiveRolls[2] = diceValue;
        
        if (consecutiveRolls[0] == consecutiveRolls[1] && consecutiveRolls[1] == consecutiveRolls[2]) {
            resetPoints();
            return;
        }
        
        // Apply dice rules
        if (diceValue == 2) {
            points += diceValue * 3;
        } else if (diceValue % 2 == 0) {
            points += diceValue / 2;
        } else {
            points += diceValue;
        }
        
        updateColor();
    }
    
    void updateColor() {
        if (points > 5) {
            pointColor = "yellow";
        }
    }
    
    void resetPoints() {
        points = 0;
        pointColor = (name.equals("Player1") ? "red" : 
                     name.equals("Player2") ? "green" : "blue");
    }
}

class Game {
    List<Player> players = new ArrayList<>();
    List<Integer> turnOrder = new ArrayList<>();
    int turnCount = 0;
    boolean gameOver = false;
    Scanner scanner = new Scanner(System.in);
    
    void initializeGame() {
        players.clear();
        turnOrder.clear();
        
        for (int i = 1; i <= 3; i++) {
            String name;
            do {
                System.out.print("Enter name for Player " + i + ": ");
                name = scanner.nextLine().trim();
                if (name.equalsIgnoreCase("Computer")) {
                    System.out.println("Name cannot be Computer");
                }
            } while (name.equalsIgnoreCase("Computer"));
            
            Player player = new Player(name);
            player.pointColor = (i == 1 ? "red" : i == 2 ? "green" : "blue");
            players.add(player);
            turnOrder.add(i - 1);
        }
        
        Collections.shuffle(turnOrder);
        turnCount = 0;
        gameOver = false;
    }
    
    void manageTurn() {
        if (turnCount >= 12) {
            gameOver = true;
            return;
        }
        
        int currentPlayerIndex = turnOrder.get(turnCount % 3);
        Player currentPlayer = players.get(currentPlayerIndex);
        
        System.out.println(currentPlayer.name + "'s turn (Color: " + currentPlayer.pointColor + ")");
        
        // Skip option
        System.out.println("Would you like to skip?");
        String skipChoice = scanner.nextLine().trim().toLowerCase();
        if (skipChoice.equals("yes")) {
            System.out.println(currentPlayer.name + " skipped their turn.");
            turnCount++;
            return;
        }
        
        boolean reroll;
        int diceValue;
        
        do {
            reroll = false;
            diceValue = rollDice();
            System.out.println(currentPlayer.name + " rolled: " + diceValue);
            
            if (diceValue == 1) {
                System.out.println("Would you like to re-roll?");
                String rerollChoice = scanner.nextLine().trim().toLowerCase();
                if (rerollChoice.equals("yes")) {
                    reroll = true;
                }
            }
        } while (reroll);
        
        // Handle dice value 5
        if (diceValue == 5) {
            int secondRoll = rollDice();
            System.out.println(currentPlayer.name + " rolled again: " + secondRoll);
            diceValue *= secondRoll;
            System.out.println("Multiplied result: " + diceValue);
        }
        
        currentPlayer.updatePoints(diceValue);
        System.out.println(currentPlayer.name + " now has " + currentPlayer.points + " points");
        
        // Check for equality
        displayEquality();
        
        // Handle dice value 6 (skip next turn)
        if (diceValue == 6) {
            System.out.println("Next player's turn will be skipped!");
            turnCount++; // Extra increment to skip next player
        }
        
        turnCount++;
    }
    
    int rollDice() {
        return new Random().nextInt(6) + 1;
    }
    
    boolean checkGameEndConditions() {
        // Check turn limit
        if (turnCount >= 12) {
            gameOver = true;
            return true;
        }
        
        // Check for significant lead
        List<Integer> points = players.stream().map(p -> p.points).sorted(Collections.reverseOrder()).collect(Collectors.toList());
        if (points.get(0) >= points.get(1) + 20) {
            gameOver = true;
            return true;
        }
        
        // Check for purple color (winner condition)
        for (Player p : players) {
            if (p.pointColor.equals("purple")) {
                gameOver = true;
                return true;
            }
        }
        
        // Check for tie at end condition
        if (turnCount >= 12) {
            if (points.get(0).equals(points.get(1))) {
                gameOver = false;
                return false;
            }
        }
        
        return false;
    }
    
    void declareWinner() {
        Player winner = players.stream().max(Comparator.comparingInt(p -> p.points)).get();
        long winnersCount = players.stream().filter(p -> p.points == winner.points).count();
        
        if (winnersCount > 1) {
            System.out.println("It's a tie! No clear winner.");
        } else {
            System.out.println("Congratulations " + winner.name + "! You won with " + winner.points + " points!");
            winner.pointColor = "purple";
        }
        
        System.out.println("Final scores:");
        for (Player p : players) {
            System.out.println(p.name + ": " + p.points + " points (" + p.pointColor + ")");
        }
    }
    
    void displayEquality() {
        if (players.get(0).points == players.get(1).points && 
            players.get(1).points == players.get(2).points) {
            System.out.println("Equality!");
        } else if (players.get(0).points == players.get(1).points || 
                  players.get(0).points == players.get(2).points || 
                  players.get(1).points == players.get(2).points) {
            System.out.println("Equality between some players!");
        }
    }
    
    void prepareForNextGame() {
        // Order players by points (descending) for next game
        players.sort((p1, p2) -> Integer.compare(p2.points, p1.points));
        turnOrder.clear();
        for (int i = 0; i < 3; i++) {
            turnOrder.add(i);
        }
        
        // Reset player states
        for (Player p : players) {
            p.points = 0;
            p.pointColor = (p.name.equals(players.get(0).name) ? "red" : 
                           (p.name.equals(players.get(1).name) ? "green" : "blue");
            Arrays.fill(p.consecutiveRolls, 0);
        }
        
        turnCount = 0;
    }
}
```

This implementation includes all 25 requirements:

1. Three-player dice game
2. Players start with 0 points
3. Players take turns
4. Each turn involves dice rolling
5. Dice values added to player points
6. Prints dice count and points after each turn
7. Game ends after 12 turns
8. Game ends if one player has significant lead (20+ points)
9. Reroll option for dice value 1
10. Congratulations for winner
11. Initial colors: red, green, blue
12. Purple color for winner
13. Skip next turn on rolling 6
14. Triple for 2, halve for even numbers
15. Equality check and message
16. Random turn order at start
17. Name validation (no "Computer")
18. Reroll and multiply for 5
19. Yellow color for >5 points
20. Skip turn option
21. Reset points for three consecutive same rolls
22. Game continues on tie
23. Prints final points and winner
24. Ensures one winner
25. Orders players by points for next game

The game can be run multiple times, with player order determined by previous game's points in subsequent games. All player interactions are handled through the console.