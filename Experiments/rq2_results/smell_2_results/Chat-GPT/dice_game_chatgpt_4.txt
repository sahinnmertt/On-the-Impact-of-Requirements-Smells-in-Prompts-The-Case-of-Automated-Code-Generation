Below is the complete Java code for the dice game as per the given specifications. The code includes all the required classes and methods, and it adheres to the rules and mechanics described.

```java
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

class Player {
    String name;
    int points;
    String pointColor;
    int[] consecutiveRolls;

    Player(String name) {
        this.name = name;
        this.points = 0;
        this.pointColor = "red"; // Default color for player 1
        this.consecutiveRolls = new int[3];
    }

    void updatePoints(int diceValue) {
        if (diceValue == 2) {
            diceValue *= 3;
        } else if (diceValue % 2 == 0) {
            diceValue /= 2;
        }
        points += diceValue;
        updateColor();
    }

    void updateColor() {
        if (points > 5) {
            pointColor = "yellow";
        }
        if (points >= 10) { // Assuming 10 points is sufficient to win
            pointColor = "purple";
        }
    }

    void resetPoints() {
        points = 0;
    }
}

class Game {
    List<Player> players;
    List<Integer> turnOrder;
    int turnCount;
    boolean gameOver;

    Game() {
        players = new ArrayList<>();
        turnOrder = new ArrayList<>();
        turnCount = 0;
        gameOver = false;
    }

    void initializeGame() {
        Scanner scanner = new Scanner(System.in);
        for (int i = 0; i < 3; i++) {
            System.out.println("Enter name for player " + (i + 1) + ":");
            String name = scanner.nextLine();
            while (name.equalsIgnoreCase("Computer")) {
                System.out.println("Name cannot be Computer. Enter another name:");
                name = scanner.nextLine();
            }
            Player player = new Player(name);
            if (i == 1) player.pointColor = "green";
            if (i == 2) player.pointColor = "blue";
            players.add(player);
            turnOrder.add(i);
        }
        Collections.shuffle(turnOrder);
    }

    void manageTurn() {
        Scanner scanner = new Scanner(System.in);
        int currentPlayerIndex = turnOrder.get(turnCount % 3);
        Player currentPlayer = players.get(currentPlayerIndex);

        System.out.println(currentPlayer.name + "'s turn. Current points: " + currentPlayer.points);
        System.out.println("Would you like to skip?");
        String skip = scanner.nextLine();
        if (skip.equalsIgnoreCase("yes")) {
            turnCount++;
            return;
        }

        int diceValue = rollDice();
        System.out.println("Dice rolled: " + diceValue);

        if (diceValue == 1) {
            System.out.println("Would you like to re-roll?");
            String reroll = scanner.nextLine();
            if (reroll.equalsIgnoreCase("yes")) {
                diceValue = rollDice();
                System.out.println("Re-rolled dice: " + diceValue);
            }
        }

        if (diceValue == 5) {
            int secondRoll = rollDice();
            System.out.println("Rolled a 5, rolling again: " + secondRoll);
            diceValue *= secondRoll;
        }

        currentPlayer.updatePoints(diceValue);
        System.out.println(currentPlayer.name + " now has " + currentPlayer.points + " points.");

        if (diceValue == 6) {
            System.out.println("Rolled a 6, next player's turn is skipped.");
            turnCount += 2;
        } else {
            turnCount++;
        }

        if (checkGameEndConditions()) {
            gameOver = true;
            declareWinner();
        }
    }

    int rollDice() {
        return (int) (Math.random() * 6) + 1;
    }

    boolean checkGameEndConditions() {
        if (turnCount >= 12) return true;

        for (Player player : players) {
            if (player.points >= 10) return true;
        }

        int maxPoints = players.stream().mapToInt(p -> p.points).max().orElse(0);
        int minPoints = players.stream().mapToInt(p -> p.points).min().orElse(0);
        if (maxPoints - minPoints > 5) return true;

        return false;
    }

    void declareWinner() {
        Player winner = players.stream().max((p1, p2) -> Integer.compare(p1.points, p2.points)).orElse(null);
        if (winner != null) {
            System.out.println("Congratulations " + winner.name + "! You are the winner with " + winner.points + " points.");
        }
    }

    void displayEquality() {
        if (players.get(0).points == players.get(1).points && players.get(1).points == players.get(2).points) {
            System.out.println("Equality!");
        }
    }

    void prepareForNextGame() {
        players.sort((p1, p2) -> Integer.compare(p2.points, p1.points));
        turnOrder.clear();
        for (int i = 0; i < players.size(); i++) {
            turnOrder.add(i);
        }
    }
}

public class DiceGame {
    public static void main(String[] args) {
        Game game = new Game();
        game.initializeGame();

        while (!game.gameOver) {
            game.manageTurn();
        }

        game.displayEquality();
        game.prepareForNextGame();
    }
}
```

This code implements the dice game with all the specified requirements. The game initializes with three players, manages turns, handles special conditions like re-rolls and skips, and determines the winner based on the rules provided.