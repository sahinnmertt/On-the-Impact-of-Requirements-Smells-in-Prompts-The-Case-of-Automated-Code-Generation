Develop a Java 8 application for the Scopa card game involving three players. The game must follow the provided specifications and implement all 16 requirements described at the end.
You must implement all the described classes and methods exactly as structured in the skeleton code. The game should be fully functional and adhere to all mechanics and rules.
You must provide the entire code in one file.
All attributes and methods must be public. The Player, Card  and Game classes must not use public/private specifications explicitly, meaning they should be implemented as "class Player", "class Game" , "class Card".
Classes and Methods Design
1. Player Class
Attributes:
name (String): The name of the player.
score (int): The player's total score.
specialPoints (int): Points earned from clearing all cards on the table.
hand (List<Card>): The player's current hand of cards.
discardPile (List<Card>): The player's collected cards.
Methods:
Player(String name): Constructor that initializes the player's name and starting attributes.
Implements: None explicitly, but necessary for the game structure.
playCard(int cardIndex): Card: Allows a player to select a card from their hand to play.
Inputs: cardIndex (int) - Index of the card in the player's hand.
Outputs: Card - The selected card to be played.
Implements: Requirement 9.
addToDiscardPile(List<Card> capturedCards): Adds captured cards to the player's discard pile.
Inputs: List<Card> capturedCards
Outputs: void
Implements: Requirements 10, 11.
clearTableCapture(): Implements the requirement when the player clears the table.
Inputs: None.
Outputs: void
Implements: Requirement 3.

2. Card Class
Attributes:
suit (String): The suit of the card.
value (int): The value of the card.
Methods:
Card(String suit, int value): Constructor to initialize the card.
Implements: None explicitly.
getValue(): int: Returns the numerical value of the card.
Inputs: None.
Outputs: int
getSuit(): String: Returns the suit of the card.
Inputs: None.
Outputs: String

3. Game Class
Attributes:
players (List<Player>): A list of players participating in the game.
deck (List<Card>): The deck of the Scopa cards.
tableCards (List<Card>): The cards currently on the table.
turnOrder (List<Integer>): The randomized turn order.
roundOver (boolean): Indicates if the current round has ended.
gameOver (boolean): Indicates if the game has ended.
roundCount(int): Tracks number of rounds played.
Methods:
Game(): Default constructor that initializes game elements.
initializeGame(): Sets up the game by initializing the deck, dealing cards, determining turn order and initializing players according to requirements, players names must be Alice, Bob and Charlie.
Implements: Requirements 1, 2, 3, 4, 5, 8.
playTurn(Player player): Handles a player’s turn, ensuring they select a card to play and evaluating matching conditions and updates scores.
Implements: Requirements 7,9, 10, 11, 12, 13,16.
handleRoundEnd(): Executes end-of-round logic.
Implements: Requirement 14.
calculateFinalScores(): Calculates the scores at the end of a round to determine if the game should end.
Implements: Requirement 15,16.
declareWinner(): Prints the game’s winner based on the requirement specified.
Implements: Requirement 6.


4. ScopaGame Class
This is the class where you run the game with the main function.
Methods:
main(String[] args): Initializes and starts the game.


Requirements:
1.A game for three players.
2.The program shall decide the players’ turn order randomly at the beginning of the game.
3.Every time a player takes all the cards from the table during his turn, he earns a special point.
4.The game is played with a deck of 40 cards, divided into four suits (Coins, Cups, Swords, Hearts, and Clubs).
5.Every suit has 10 cards, from 1 to 10.
6.The primary objective of Scopa is to reach a certain goal. The player who first reaches the limit wins the game.
7.It could be fun to be able to play multiple round until reaching the winning score.
8.First, the program shuffles the deck. Then, each player receives three cards. Finally, four cards are placed on the table.
9.In each turn of the game, a card must be selected from the player's hand.
10.If the value of the selected card during a player's turn matches the value of one card on the table, the player puts it on his discard pile.
11.If the value of the selected card during a player's turn matches the sum of the values of two or more cards on the table, the matching cards are put on the player's discard pile.
12.If the selected card doesn't match any card on the table, the player must do something with the card anyway.
13.When a player has no cards left on his hand, he could potentially receive three new cards from the deck.
14.Once all the cards have been distributed to the players, the round comes to an end. If there are any cards left on the table, the player who last drew cards could take them on his discard pile.
15.After the round has ended, all players tally up their points. If any player reaches the winning score, the game ends. If not, a new round begins.
16.At the end of each round, the players receive a point for each of the following rules applied to the discard piles of each player: the player with the most cards, the player with the most coins cards, the player who has the seven of Coins, the player with the highest sum of their cards.