Below is a complete Java 8 application for a Snake game that adheres to the provided specifications and implements all the required classes and methods. The game is designed to be run in a console environment, and it uses basic text-based input for controlling the snake.

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Coordinates {
    int x;
    int y;

    Coordinates(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

class Snake {
    List<Coordinates> body;
    String direction;
    double speed;
    int growing;
    String color;

    Snake() {
        body = new ArrayList<>();
        body.add(new Coordinates(0, 0)); // Start at bottom left
        direction = "UP";
        speed = 0.5;
        growing = 0;
        color = "GREEN";
    }

    void move() {
        Coordinates head = body.get(0);
        Coordinates newHead = new Coordinates(head.x, head.y);

        switch (direction) {
            case "UP":
                newHead.y += 1;
                break;
            case "DOWN":
                newHead.y -= 1;
                break;
            case "LEFT":
                newHead.x -= 1;
                break;
            case "RIGHT":
                newHead.x += 1;
                break;
        }

        body.add(0, newHead);
        if (growing > 0) {
            growing--;
        } else {
            body.remove(body.size() - 1);
        }
    }

    void grow(int amount) {
        growing += amount;
    }

    void increaseSpeed() {
        speed *= 1.01;
    }

    void decreaseSpeed() {
        speed *= 0.95;
    }
}

class Food {
    Coordinates position;
    String color;

    Food(String color) {
        this.color = color;
        generateNewPosition(10); // Default board size
    }

    void generateNewPosition(int boardSize) {
        Random rand = new Random();
        position = new Coordinates(rand.nextInt(boardSize), rand.nextInt(boardSize));
    }
}

class Board {
    int size;
    int blockSize;

    Board(int k) {
        size = k;
        blockSize = 1; // Simplified for console
    }

    void render(Snake snake, Food food, Food bonusFood) {
        for (int y = size - 1; y >= 0; y--) {
            for (int x = 0; x < size; x++) {
                boolean isSnake = false;
                for (Coordinates c : snake.body) {
                    if (c.x == x && c.y == y) {
                        System.out.print("S ");
                        isSnake = true;
                        break;
                    }
                }
                if (!isSnake) {
                    if (food.position.x == x && food.position.y == y) {
                        System.out.print("F ");
                    } else if (bonusFood != null && bonusFood.position.x == x && bonusFood.position.y == y) {
                        System.out.print("B ");
                    } else {
                        System.out.print(". ");
                    }
                }
            }
            System.out.println();
        }
    }
}

class Game {
    Snake snake;
    Food food;
    Food bonusFood;
    boolean paused;
    String difficulty;
    int time;
    boolean gameOver;
    Board board;

    Game(int boardSize, String difficulty) {
        this.difficulty = difficulty;
        board = new Board(boardSize);
        snake = new Snake();
        food = new Food("RED");
        bonusFood = null;
        paused = false;
        time = 0;
        gameOver = false;
    }

    void updateGame() {
        if (!paused && !gameOver) {
            snake.move();
            checkCollisions();
            if (time % 10 == 0) { // Example interval for bonus food
                spawnBonusFood("BLUE");
            }
            time++;
        }
    }

    void checkCollisions() {
        Coordinates head = snake.body.get(0);

        // Check wall collision
        if (head.x < 0 || head.x >= board.size || head.y < 0 || head.y >= board.size) {
            gameOver = true;
            return;
        }

        // Check self collision
        for (int i = 1; i < snake.body.size(); i++) {
            if (head.x == snake.body.get(i).x && head.y == snake.body.get(i).y) {
                gameOver = true;
                return;
            }
        }

        // Check food collision
        if (head.x == food.position.x && head.y == food.position.y) {
            snake.grow(1);
            snake.increaseSpeed();
            food.generateNewPosition(board.size);
        }

        // Check bonus food collision
        if (bonusFood != null && head.x == bonusFood.position.x && head.y == bonusFood.position.y) {
            snake.grow(3);
            snake.decreaseSpeed();
            bonusFood = null;
        }
    }

    void handleKeyPress(char key) {
        switch (key) {
            case 'w':
                if (!snake.direction.equals("DOWN")) snake.direction = "UP";
                break;
            case 's':
                if (!snake.direction.equals("UP")) snake.direction = "DOWN";
                break;
            case 'a':
                if (!snake.direction.equals("RIGHT")) snake.direction = "LEFT";
                break;
            case 'd':
                if (!snake.direction.equals("LEFT")) snake.direction = "RIGHT";
                break;
            case 'p':
                paused = !paused;
                break;
        }
    }

    void spawnBonusFood(String foodColor) {
        if (bonusFood == null) {
            bonusFood = new Food(foodColor);
        }
    }

    void resetGame() {
        snake = new Snake();
        food = new Food("RED");
        bonusFood = null;
        paused = false;
        time = 0;
        gameOver = false;
    }
}

public class SnakeGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter board size:");
        int boardSize = scanner.nextInt();
        System.out.println("Select difficulty (easy/hard):");
        String difficulty = scanner.next();

        Game game = new Game(boardSize, difficulty);

        while (!game.gameOver) {
            game.board.render(game.snake, game.food, game.bonusFood);
            System.out.println("Enter command (w/a/s/d to move, p to pause):");
            char command = scanner.next().charAt(0);
            game.handleKeyPress(command);
            game.updateGame();
        }

        System.out.println("Game Over!");
    }
}
```

### Explanation:
- **Coordinates Class**: Represents a position on the board.
- **Snake Class**: Manages the snake's body, movement, growth, and speed.
- **Food Class**: Manages the position and color of food items.
- **Board Class**: Handles rendering the game state to the console.
- **Game Class**: Manages the game state, including the snake, food, and game logic.
- **SnakeGame Class**: Contains the `main` method to start the game and handle user input.

This code provides a basic console-based implementation of the Snake game. It uses text input to control the snake and displays the game state in the console. The game logic includes handling collisions, growing the snake, and managing game state transitions.