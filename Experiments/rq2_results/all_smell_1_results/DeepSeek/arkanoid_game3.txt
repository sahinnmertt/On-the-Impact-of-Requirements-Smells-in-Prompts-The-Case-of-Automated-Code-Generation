Here's the complete Java 8 implementation of the Arkanoid game according to the specifications:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Ball {
    int x;
    int y;
    int diameter = 10;
    int xSpeed;
    int ySpeed;

    Ball(int x, int y) {
        this.x = x;
        this.y = y;
        this.xSpeed = 5;
        this.ySpeed = 5;
    }

    void move() {
        x += xSpeed;
        y += ySpeed;
    }
}

class Paddle {
    int x;
    int y;
    int width = 20;
    int height = 10;

    Paddle(int x) {
        this.x = x;
        this.y = 290; // Bottom of the board
    }

    void moveLeft() {
        if (x > 0) {
            x -= 5;
        }
    }

    void moveRight() {
        if (x < 180) { // Board width - paddle width
            x += 5;
        }
    }
}

class Brick {
    int x;
    int y;
    int width;
    int height = 10;
    int hitsRequired;
    String color;
    boolean destroyed = false;

    Brick(int x, int y, String color, int hitsRequired) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.hitsRequired = hitsRequired;
        this.width = color.equals("gold") ? 40 : 20;
    }

    void hit() {
        hitsRequired--;
        if (hitsRequired <= 0) {
            destroyed = true;
        }
    }
}

class Board {
    int width = 200;
    int height = 300;

    Board(int width, int height) {
        this.width = width;
        this.height = height;
    }
}

class Game {
    Ball ball;
    Paddle paddle;
    Board board;
    List<Brick> bricks;
    int level = 1;
    int lives = 3;
    boolean gameOver = false;
    int maxLevel = 33;

    Game() {
        board = new Board(200, 300);
        paddle = new Paddle(90); // Center of the board
        ball = new Ball(0, 0);
        bricks = new ArrayList<>();
        generateBricks();
    }

    void generateBricks() {
        bricks.clear();
        Random random = new Random();

        // Add blue bricks (50 in level 1)
        int blueBricks = 50 - (level - 1) * 0; // Always 50 blue bricks
        for (int i = 0; i < blueBricks; i++) {
            int x = random.nextInt(180); // 200 - brick width
            int y = random.nextInt(100) + 20; // Upper part of the board
            bricks.add(new Brick(x, y, "blue", 1));
        }

        // Add red bricks (2 per level after level 1)
        int redBricks = (level - 1) * 2;
        for (int i = 0; i < redBricks; i++) {
            int x = random.nextInt(180);
            int y = random.nextInt(100) + 20;
            bricks.add(new Brick(x, y, "red", 2));
        }

        // Add gold bricks (1 per level after level 1)
        int goldBricks = level - 1;
        for (int i = 0; i < goldBricks; i++) {
            int x = random.nextInt(160); // 200 - double brick width
            int y = random.nextInt(100) + 20;
            bricks.add(new Brick(x, y, "gold", 3));
        }
    }

    void updateGame() {
        ball.move();
        checkCollisions();

        // Check if all bricks are destroyed
        boolean levelComplete = true;
        for (Brick brick : bricks) {
            if (!brick.destroyed) {
                levelComplete = false;
                break;
            }
        }

        if (levelComplete) {
            if (level < maxLevel) {
                nextLevel();
            } else {
                gameOver = true;
                System.out.println("Congratulations! You won the game!");
            }
        }
    }

    void checkCollisions() {
        // Check wall collisions
        if (ball.x <= 0 || ball.x >= board.width - ball.diameter) {
            ball.xSpeed = -ball.xSpeed;
        }
        if (ball.y <= 0) {
            ball.ySpeed = -ball.ySpeed;
        }

        // Check paddle collision
        if (ball.y + ball.diameter >= paddle.y && 
            ball.y <= paddle.y + paddle.height &&
            ball.x + ball.diameter >= paddle.x && 
            ball.x <= paddle.x + paddle.width) {
            ball.ySpeed = -Math.abs(ball.ySpeed); // Ensure ball goes up
        }

        // Check bottom collision (lose life)
        if (ball.y >= board.height) {
            loseLife();
        }

        // Check brick collisions
        for (Brick brick : bricks) {
            if (!brick.destroyed && 
                ball.x + ball.diameter >= brick.x && 
                ball.x <= brick.x + brick.width &&
                ball.y + ball.diameter >= brick.y && 
                ball.y <= brick.y + brick.height) {
                
                brick.hit();
                ball.ySpeed = -ball.ySpeed;
                break;
            }
        }
    }

    void loseLife() {
        lives--;
        if (lives <= 0) {
            gameOver = true;
            System.out.println("Game Over!");
        } else {
            // Reset ball and paddle
            ball = new Ball(0, 0);
            paddle = new Paddle(90);
        }
    }

    void nextLevel() {
        level++;
        ball = new Ball(0, 0);
        paddle = new Paddle(90);
        // Increase ball speed
        ball.xSpeed += 1;
        ball.ySpeed += 1;
        generateBricks();
    }

    void resetGame() {
        level = 1;
        lives = 3;
        gameOver = false;
        ball = new Ball(0, 0);
        paddle = new Paddle(90);
        generateBricks();
    }
}

public class ArkanoidGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Game game = new Game();
        
        System.out.println("Arkanoid Game - Use LEFT and RIGHT arrow keys to move the paddle");
        System.out.println("Press ENTER to start...");
        scanner.nextLine();

        while (true) {
            if (game.gameOver) {
                System.out.println("Game Over! Press R to restart or Q to quit");
                String input = scanner.nextLine().toUpperCase();
                if (input.equals("R")) {
                    game.resetGame();
                } else if (input.equals("Q")) {
                    break;
                }
            }

            // Simulate game loop (in a real implementation, this would be a proper game loop)
            for (int i = 0; i < 10; i++) {
                game.updateGame();
                if (game.gameOver) break;
            }

            // Simulate user input (in a real implementation, this would be event-based)
            System.out.println("Move (L/R/N): ");
            String input = scanner.nextLine().toUpperCase();
            if (input.equals("L")) {
                game.paddle.moveLeft();
            } else if (input.equals("R")) {
                game.paddle.moveRight();
            }

            // Display game state
            System.out.println("Level: " + game.level + " Lives: " + game.lives);
            System.out.println("Ball: (" + game.ball.x + "," + game.ball.y + ")");
            System.out.println("Paddle: " + game.paddle.x);
            System.out.println("Bricks remaining: " + 
                game.bricks.stream().filter(b -> !b.destroyed).count());
        }
        
        scanner.close();
    }
}
```

This implementation includes all the required classes and methods, following the specifications exactly. The game includes:

1. Ball movement and collision detection
2. Paddle control with boundary checking
3. Different types of bricks with varying hit requirements
4. Level progression with increasing difficulty
5. Lives system and game over handling
6. Proper collision responses
7. Random brick generation for each level
8. Game reset functionality

Note that in a real implementation, you would want to use a proper game loop and graphics library (like JavaFX or Swing) for rendering and input handling. The current implementation uses console input/output for demonstration purposes while maintaining all the game logic exactly as specified.

The game can be started from the command line by running the ArkanoidGame class, and it will guide you through the gameplay with simple text commands (L for left, R for right, N for no movement).