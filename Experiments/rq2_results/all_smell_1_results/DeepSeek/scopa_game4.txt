# Scopa Card Game Implementation

Here's the complete Java 8 implementation of the Scopa card game for three players:

```java
import java.util.*;
import java.util.stream.*;

class Card {
    String suit;
    int value;

    Card(String suit, int value) {
        this.suit = suit;
        this.value = value;
    }

    int getValue() {
        return value;
    }

    String getSuit() {
        return suit;
    }

    @Override
    public String toString() {
        return value + " of " + suit;
    }
}

class Player {
    String name;
    int score;
    int specialPoints;
    List<Card> hand;
    List<Card> discardPile;

    Player(String name) {
        this.name = name;
        this.score = 0;
        this.specialPoints = 0;
        this.hand = new ArrayList<>();
        this.discardPile = new ArrayList<>();
    }

    Card playCard(int cardIndex) {
        if (cardIndex < 0 || cardIndex >= hand.size()) {
            throw new IllegalArgumentException("Invalid card index");
        }
        return hand.remove(cardIndex);
    }

    void addToDiscardPile(List<Card> capturedCards) {
        discardPile.addAll(capturedCards);
    }

    void clearTableCapture() {
        specialPoints++;
    }

    int getTotalCards() {
        return discardPile.size();
    }

    int getCoinsCardsCount() {
        return (int) discardPile.stream().filter(card -> card.getSuit().equals("Coins")).count();
    }

    boolean hasSevenOfCoins() {
        return discardPile.stream().anyMatch(card -> card.getSuit().equals("Coins") && card.getValue() == 7);
    }

    int getSumOfCards() {
        return discardPile.stream().mapToInt(Card::getValue).sum();
    }
}

class Game {
    List<Player> players;
    List<Card> deck;
    List<Card> tableCards;
    List<Integer> turnOrder;
    boolean roundOver;
    boolean gameOver;
    int roundCount;
    static final int WINNING_SCORE = 11;

    Game() {
        players = new ArrayList<>();
        deck = new ArrayList<>();
        tableCards = new ArrayList<>();
        turnOrder = new ArrayList<>();
        roundOver = false;
        gameOver = false;
        roundCount = 0;
    }

    void initializeGame() {
        // Initialize deck
        String[] suits = {"Coins", "Cups", "Swords", "Clubs"};
        for (String suit : suits) {
            for (int value = 1; value <= 10; value++) {
                deck.add(new Card(suit, value));
            }
        }

        // Shuffle deck
        Collections.shuffle(deck);

        // Initialize players
        players.add(new Player("Alice"));
        players.add(new Player("Bob"));
        players.add(new Player("Charlie"));

        // Determine random turn order
        turnOrder = new ArrayList<>(Arrays.asList(0, 1, 2));
        Collections.shuffle(turnOrder);

        // Deal initial cards (3 to each player)
        for (int i = 0; i < 3; i++) {
            for (Player player : players) {
                if (!deck.isEmpty()) {
                    player.hand.add(deck.remove(0));
                }
            }
        }

        // Place 4 cards on the table
        for (int i = 0; i < 4; i++) {
            if (!deck.isEmpty()) {
                tableCards.add(deck.remove(0));
            }
        }

        roundCount++;
    }

    void playTurn(Player player) {
        if (player.hand.isEmpty()) {
            // Deal new cards if available
            if (!deck.isEmpty()) {
                for (int i = 0; i < 3 && !deck.isEmpty(); i++) {
                    player.hand.add(deck.remove(0));
                }
            }
            return;
        }

        // For simplicity, we'll have the player play the first card in their hand
        // In a real game, this would involve player input or AI logic
        int cardIndex = 0; // Always play first card for simplicity
        Card playedCard = player.playCard(cardIndex);

        // Check for matches
        List<List<Card>> possibleCaptures = findPossibleCaptures(playedCard);

        if (!possibleCaptures.isEmpty()) {
            // For simplicity, capture the first possible combination
            List<Card> capturedCards = possibleCaptures.get(0);
            player.addToDiscardPile(capturedCards);
            player.addToDiscardPile(Arrays.asList(playedCard));
            tableCards.removeAll(capturedCards);

            // Check if table was cleared
            if (tableCards.isEmpty()) {
                player.clearTableCapture();
            }
        } else {
            // No matches, add card to table
            tableCards.add(playedCard);
        }
    }

    List<List<Card>> findPossibleCaptures(Card playedCard) {
        List<List<Card>> possibleCaptures = new ArrayList<>();
        int targetValue = playedCard.getValue();

        // Check for single card matches
        for (Card tableCard : tableCards) {
            if (tableCard.getValue() == targetValue) {
                possibleCaptures.add(Arrays.asList(tableCard));
                return possibleCaptures; // Prefer single card captures
            }
        }

        // Check for multi-card matches
        for (int i = 2; i <= tableCards.size(); i++) {
            List<List<Card>> combinations = generateCombinations(tableCards, i);
            for (List<Card> combo : combinations) {
                int sum = combo.stream().mapToInt(Card::getValue).sum();
                if (sum == targetValue) {
                    possibleCaptures.add(combo);
                }
            }
        }

        return possibleCaptures;
    }

    List<List<Card>> generateCombinations(List<Card> cards, int k) {
        List<List<Card>> combinations = new ArrayList<>();
        generateCombinationsHelper(cards, k, 0, new ArrayList<>(), combinations);
        return combinations;
    }

    void generateCombinationsHelper(List<Card> cards, int k, int start, List<Card> current, List<List<Card>> combinations) {
        if (current.size() == k) {
            combinations.add(new ArrayList<>(current));
            return;
        }
        for (int i = start; i < cards.size(); i++) {
            current.add(cards.get(i));
            generateCombinationsHelper(cards, k, i + 1, current, combinations);
            current.remove(current.size() - 1);
        }
    }

    void handleRoundEnd() {
        // Give remaining table cards to last player who captured cards
        if (!tableCards.isEmpty()) {
            // Find the last player who captured cards
            Player lastCapturingPlayer = null;
            for (int i = turnOrder.size() - 1; i >= 0; i--) {
                Player player = players.get(turnOrder.get(i));
                if (!player.discardPile.isEmpty()) {
                    lastCapturingPlayer = player;
                    break;
                }
            }
            
            if (lastCapturingPlayer != null) {
                lastCapturingPlayer.addToDiscardPile(tableCards);
                tableCards.clear();
            }
        }

        // Calculate round scores
        calculateFinalScores();

        // Check for game over
        if (players.stream().anyMatch(p -> p.score >= WINNING_SCORE)) {
            gameOver = true;
            declareWinner();
        } else {
            // Prepare for next round
            roundOver = false;
            deck.clear();
            tableCards.clear();
            players.forEach(p -> {
                p.hand.clear();
                p.discardPile.clear();
            });
            initializeGame();
        }
    }

    void calculateFinalScores() {
        // Calculate points for each player based on their discard piles
        for (Player player : players) {
            int roundPoints = player.specialPoints; // Points from clearing the table
            player.specialPoints = 0; // Reset for next round

            // Add to total score
            player.score += roundPoints;
        }

        // Additional scoring rules
        // 1. Most cards
        int maxCards = players.stream().mapToInt(Player::getTotalCards).max().orElse(0);
        players.stream().filter(p -> p.getTotalCards() == maxCards).forEach(p -> p.score += 1);

        // 2. Most coins cards
        int maxCoins = players.stream().mapToInt(Player::getCoinsCardsCount).max().orElse(0);
        if (maxCoins > 0) {
            players.stream().filter(p -> p.getCoinsCardsCount() == maxCoins).forEach(p -> p.score += 1);
        }

        // 3. Seven of coins
        players.stream().filter(Player::hasSevenOfCoins).forEach(p -> p.score += 1);

        // 4. Highest sum of cards
        int maxSum = players.stream().mapToInt(Player::getSumOfCards).max().orElse(0);
        players.stream().filter(p -> p.getSumOfCards() == maxSum).forEach(p -> p.score += 1);
    }

    void declareWinner() {
        Player winner = players.stream()
                .max(Comparator.comparingInt(p -> p.score))
                .orElse(players.get(0));

        System.out.println("Game over! Winner is " + winner.name + " with " + winner.score + " points!");
        System.out.println("Final scores:");
        for (Player player : players) {
            System.out.println(player.name + ": " + player.score + " points");
        }
    }

    void playGame() {
        initializeGame();
        
        while (!gameOver) {
            System.out.println("\nRound " + roundCount);
            
            while (!roundOver) {
                for (int playerIndex : turnOrder) {
                    Player currentPlayer = players.get(playerIndex);
                    
                    if (currentPlayer.hand.isEmpty() && deck.isEmpty()) {
                        roundOver = true;
                        break;
                    }
                    
                    playTurn(currentPlayer);
                }
            }
            
            handleRoundEnd();
        }
    }
}

public class ScopaGame {
    public static void main(String[] args) {
        Game game = new Game();
        game.playGame();
    }
}
```

This implementation includes:

1. All required classes (Player, Card, Game, ScopaGame)
2. All specified attributes and methods
3. Game mechanics following all 16 requirements:
   - Three players (Alice, Bob, Charlie)
   - Random turn order
   - Special points for clearing the table
   - 40-card deck with 4 suits
   - Card values 1-10 per suit
   - Winning score of 11 points
   - Multiple rounds until someone wins
   - Shuffled deck and initial dealing
   - Card selection and matching logic
   - Capture rules (single card and sum matches)
   - Handling when no matches exist
   - Dealing new cards when hand is empty
   - End-of-round cleanup
   - Score calculation with all four bonus rules
   - Winner declaration

The game can be run by executing the ScopaGame class. For simplicity, the AI always plays the first card in its hand, but the full matching logic is implemented to handle all capture scenarios.