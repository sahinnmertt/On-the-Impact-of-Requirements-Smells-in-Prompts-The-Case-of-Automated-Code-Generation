# Snake Game in Java 8

Here's a complete implementation of the Snake game according to all the specified requirements:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Coordinates {
    int x;
    int y;
    
    Coordinates(int x, int y) {
        this.x = x;
        this.y = y;
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Coordinates that = (Coordinates) obj;
        return x == that.x && y == that.y;
    }
}

class Snake {
    List<Coordinates> body;
    String direction;
    double speed;
    int growing;
    String color;
    
    Snake() {
        this.body = new ArrayList<>();
        this.body.add(new Coordinates(0, 0));
        this.direction = "UP";
        this.speed = 0.5;
        this.growing = 0;
        this.color = "GREEN";
    }
    
    void move() {
        Coordinates head = body.get(0);
        Coordinates newHead = new Coordinates(head.x, head.y);
        
        switch (direction) {
            case "UP":
                newHead.y--;
                break;
            case "DOWN":
                newHead.y++;
                break;
            case "LEFT":
                newHead.x--;
                break;
            case "RIGHT":
                newHead.x++;
                break;
        }
        
        body.add(0, newHead);
        
        if (growing > 0) {
            growing--;
        } else {
            body.remove(body.size() - 1);
        }
    }
    
    void grow(int amount) {
        this.growing += amount;
    }
    
    void increaseSpeed() {
        this.speed *= 1.01;
    }
    
    void decreaseSpeed() {
        this.speed *= 0.95;
    }
}

class Food {
    Coordinates position;
    String color;
    
    Food(String color) {
        this.color = color;
        this.position = new Coordinates(0, 0);
    }
    
    void generateNewPosition(int boardSize) {
        Random random = new Random();
        this.position = new Coordinates(random.nextInt(boardSize), random.nextInt(boardSize));
    }
}

class Board {
    int size;
    int blockSize;
    
    Board(int k) {
        this.size = k;
        this.blockSize = 500 / k; // Assuming a 500px canvas
    }
    
    void render(Snake snake, Food food, Food bonusFood) {
        // In a real implementation, this would draw the game state
        System.out.println("Rendering board...");
        System.out.println("Snake: " + snake.body);
        System.out.println("Food: " + food.position + " (" + food.color + ")");
        if (bonusFood != null) {
            System.out.println("Bonus Food: " + bonusFood.position + " (" + bonusFood.color + ")");
        }
    }
}

class Game {
    Snake snake;
    Food food;
    Food bonusFood;
    boolean paused;
    String difficulty;
    int time;
    boolean gameOver;
    Board board;
    int foodEaten;
    
    Game(int boardSize, String difficulty) {
        this.board = new Board(boardSize);
        this.snake = new Snake();
        this.food = new Food("RED");
        this.food.generateNewPosition(boardSize);
        this.bonusFood = null;
        this.paused = false;
        this.difficulty = difficulty;
        this.time = 0;
        this.gameOver = false;
        this.foodEaten = 0;
        
        if (difficulty.equalsIgnoreCase("hard")) {
            snake.speed = 1.0;
        }
    }
    
    void updateGame() {
        if (paused || gameOver) return;
        
        snake.move();
        
        // Check if snake ate food
        if (snake.body.get(0).equals(food.position)) {
            snake.grow(1);
            snake.increaseSpeed();
            food.generateNewPosition(board.size);
            foodEaten++;
            
            // Check for bonus food spawn
            if (foodEaten % 5 == 0) {
                spawnBonusFood("BLUE");
            }
            
            // Random chance for golden bonus
            if (Math.random() < 0.1) {
                spawnBonusFood("GOLD");
            }
        }
        
        // Check if snake ate bonus food
        if (bonusFood != null && snake.body.get(0).equals(bonusFood.position)) {
            if (bonusFood.color.equals("BLUE")) {
                snake.grow(3);
            } else if (bonusFood.color.equals("GOLD")) {
                snake.decreaseSpeed();
            }
            bonusFood = null;
        }
        
        checkCollisions();
        time++;
    }
    
    void checkCollisions() {
        Coordinates head = snake.body.get(0);
        
        // Check wall collision
        if (head.x < 0 || head.x >= board.size || head.y < 0 || head.y >= board.size) {
            gameOver = true;
            return;
        }
        
        // Check self collision
        for (int i = 1; i < snake.body.size(); i++) {
            if (head.equals(snake.body.get(i))) {
                gameOver = true;
                return;
            }
        }
    }
    
    void handleKeyPress(char key) {
        if (key == 'p') {
            paused = !paused;
            return;
        }
        
        if (paused) return;
        
        switch (Character.toUpperCase(key)) {
            case 'W':
            case 'I':
                if (!snake.direction.equals("DOWN")) snake.direction = "UP";
                break;
            case 'S':
            case 'K':
                if (!snake.direction.equals("UP")) snake.direction = "DOWN";
                break;
            case 'A':
            case 'J':
                if (!snake.direction.equals("RIGHT")) snake.direction = "LEFT";
                break;
            case 'D':
            case 'L':
                if (!snake.direction.equals("LEFT")) snake.direction = "RIGHT";
                break;
        }
    }
    
    void spawnBonusFood(String foodColor) {
        if (bonusFood == null) {
            bonusFood = new Food(foodColor);
            bonusFood.generateNewPosition(board.size);
        }
    }
    
    void resetGame() {
        this.snake = new Snake();
        this.food = new Food("RED");
        this.food.generateNewPosition(board.size);
        this.bonusFood = null;
        this.paused = false;
        this.time = 0;
        this.gameOver = false;
        this.foodEaten = 0;
        
        if (difficulty.equalsIgnoreCase("hard")) {
            snake.speed = 1.0;
        }
    }
}

public class SnakeGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter board size (k for k x k board): ");
        int boardSize = scanner.nextInt();
        scanner.nextLine(); // consume newline
        
        System.out.print("Enter difficulty (easy/hard): ");
        String difficulty = scanner.nextLine();
        
        Game game = new Game(boardSize, difficulty);
        
        System.out.println("Game started! Controls: W/I=UP, S/K=DOWN, A/J=LEFT, D/L=RIGHT, P=PAUSE");
        
        // Simple console-based game loop
        while (!game.gameOver) {
            if (System.in.available() > 0) {
                char key = (char) System.in.read();
                game.handleKeyPress(key);
            }
            
            if (!game.paused) {
                game.updateGame();
                game.board.render(game.snake, game.food, game.bonusFood);
                
                try {
                    // Adjust sleep time based on snake speed
                    long sleepTime = (long) (1000 / game.snake.speed);
                    Thread.sleep(sleepTime);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
        
        System.out.println("Game Over! Final score: " + game.snake.body.size());
        scanner.close();
    }
}
```

This implementation includes:

1. All required classes (Snake, Food, Board, Coordinates, Game, SnakeGame)
2. All specified attributes and methods
3. All 14 requirements implemented:
   - Snake growth when eating food (Req 1, 2, 3)
   - Collision detection with walls and self (Req 4, 5)
   - Customizable board size (Req 6)
   - Initial snake and food positions (Req 7)
   - Keyboard controls (Req 8)
   - New food generation (Req 9)
   - Speed increase after eating (Req 10)
   - Difficulty levels (Req 11)
   - Bonus food spawning (Req 12)
   - Golden bonus food with speed decrease (Req 13)
   - Pause functionality (Req 14)

The game uses a simple console-based interface for demonstration. In a real implementation, you would replace the console output with actual graphics rendering. The core game logic is fully implemented according to all requirements.

To play the game:
1. Enter the board size (e.g., 10 for a 10x10 grid)
2. Enter difficulty (easy or hard)
3. Use keyboard controls (WASD or IJKL) to move the snake
4. Press P to pause/unpause
5. Try to eat the red food to grow and avoid collisions