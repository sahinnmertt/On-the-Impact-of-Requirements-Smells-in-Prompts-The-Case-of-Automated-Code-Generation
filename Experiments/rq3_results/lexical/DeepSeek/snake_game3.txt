Here's the complete Java 8 implementation of the Snake game according to the provided specifications:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Coordinates {
    int x;
    int y;
    
    Coordinates(int x, int y) {
        this.x = x;
        this.y = y;
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Coordinates that = (Coordinates) obj;
        return x == that.x && y == that.y;
    }
}

class Snake {
    List<Coordinates> body;
    String direction;
    double speed;
    int growing;
    String color;
    
    Snake() {
        body = new ArrayList<>();
        body.add(new Coordinates(0, 0));
        direction = "UP";
        color = "GREEN";
        growing = 0;
    }
    
    void move() {
        Coordinates head = body.get(0);
        Coordinates newHead;
        
        switch (direction) {
            case "UP":
                newHead = new Coordinates(head.x, head.y - 1);
                break;
            case "DOWN":
                newHead = new Coordinates(head.x, head.y + 1);
                break;
            case "LEFT":
                newHead = new Coordinates(head.x - 1, head.y);
                break;
            case "RIGHT":
                newHead = new Coordinates(head.x + 1, head.y);
                break;
            default:
                newHead = new Coordinates(head.x, head.y - 1);
        }
        
        body.add(0, newHead);
        
        if (growing > 0) {
            growing--;
        } else {
            body.remove(body.size() - 1);
        }
    }
    
    void grow(int amount) {
        growing += amount;
    }
    
    void increaseSpeed() {
        speed *= 1.01;
    }
    
    void decreaseSpeed() {
        speed *= 0.95;
    }
}

class Food {
    Coordinates position;
    String color;
    
    Food(String color) {
        this.color = color;
        generateNewPosition(20); // Default size, will be reset in game
    }
    
    void generateNewPosition(int boardSize) {
        Random random = new Random();
        position = new Coordinates(random.nextInt(boardSize), random.nextInt(boardSize));
    }
}

class Board {
    int size;
    int blockSize;
    
    Board(int k) {
        this.size = k;
        this.blockSize = 500 / k; // Assuming a 500px canvas
    }
    
    void render() {
        // In a real implementation, this would draw the game elements
        System.out.println("Rendering board...");
    }
}

class Game {
    Snake snake;
    Food food;
    Food bonusFood;
    Food goldenFood;
    boolean paused;
    String difficulty;
    int time;
    boolean gameOver;
    int score;
    int foodEaten;
    Board board;
    
    Game(int boardSize, String difficulty) {
        this.board = new Board(boardSize);
        this.snake = new Snake();
        this.food = new Food("RED");
        this.food.generateNewPosition(boardSize);
        this.difficulty = difficulty;
        this.snake.speed = difficulty.equals("easy") ? 0.5 : 2.0;
        this.paused = false;
        this.time = 0;
        this.gameOver = false;
        this.score = 0;
        this.foodEaten = 0;
    }
    
    void updateGame() {
        if (paused || gameOver) return;
        
        snake.move();
        checkCollisions();
        
        // Check if snake ate food
        if (snake.body.get(0).equals(food.position)) {
            snake.grow(1);
            snake.increaseSpeed();
            food.generateNewPosition(board.size);
            score += 10;
            foodEaten++;
            
            if (foodEaten % 10 == 0) {
                spawnBonusFood("BLUE");
            }
            
            // Random chance to spawn golden food (10% chance)
            if (Math.random() < 0.1) {
                spawnBonusFood("GOLD");
            }
        }
        
        // Check if snake ate bonus food
        if (bonusFood != null && snake.body.get(0).equals(bonusFood.position)) {
            snake.grow(3);
            bonusFood = null;
            score += 30;
        }
        
        // Check if snake ate golden food
        if (goldenFood != null && snake.body.get(0).equals(goldenFood.position)) {
            snake.decreaseSpeed();
            goldenFood = null;
            score += 50;
        }
    }
    
    void checkCollisions() {
        Coordinates head = snake.body.get(0);
        
        // Check wall collision
        if (head.x < 0 || head.x >= board.size || head.y < 0 || head.y >= board.size) {
            gameOver = true;
            return;
        }
        
        // Check self collision
        for (int i = 1; i < snake.body.size(); i++) {
            if (head.equals(snake.body.get(i))) {
                gameOver = true;
                return;
            }
        }
    }
    
    void handleKeyPress(char key) {
        switch (Character.toUpperCase(key)) {
            case 'P':
                paused = !paused;
                break;
            case 'W':
                if (!snake.direction.equals("DOWN")) snake.direction = "UP";
                break;
            case 'S':
                if (!snake.direction.equals("UP")) snake.direction = "DOWN";
                break;
            case 'A':
                if (!snake.direction.equals("RIGHT")) snake.direction = "LEFT";
                break;
            case 'D':
                if (!snake.direction.equals("LEFT")) snake.direction = "RIGHT";
                break;
        }
    }
    
    void spawnBonusFood(String foodColor) {
        if (foodColor.equals("BLUE")) {
            bonusFood = new Food("BLUE");
            bonusFood.generateNewPosition(board.size);
        } else if (foodColor.equals("GOLD")) {
            goldenFood = new Food("GOLD");
            goldenFood.generateNewPosition(board.size);
        }
    }
    
    void resetGame() {
        snake = new Snake();
        food = new Food("RED");
        food.generateNewPosition(board.size);
        bonusFood = null;
        goldenFood = null;
        snake.speed = difficulty.equals("easy") ? 0.5 : 2.0;
        paused = false;
        gameOver = false;
        score = 0;
        foodEaten = 0;
    }
}

public class SnakeGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter board size (k for k x k board): ");
        int boardSize = scanner.nextInt();
        scanner.nextLine(); // consume newline
        
        System.out.print("Enter difficulty (easy/hard): ");
        String difficulty = scanner.nextLine().toLowerCase();
        
        while (!difficulty.equals("easy") && !difficulty.equals("hard")) {
            System.out.print("Invalid input. Enter difficulty (easy/hard): ");
            difficulty = scanner.nextLine().toLowerCase();
        }
        
        Game game = new Game(boardSize, difficulty);
        
        System.out.println("Game started!");
        System.out.println("Controls: W (Up), S (Down), A (Left), D (Right), P (Pause)");
        
        // In a real implementation, this would be a game loop with proper timing
        // For this example, we'll simulate some moves
        game.handleKeyPress('D');
        game.updateGame();
        game.handleKeyPress('S');
        game.updateGame();
        game.handleKeyPress('A');
        game.updateGame();
        game.handleKeyPress('W');
        game.updateGame();
        
        System.out.println("Game over! Final score: " + game.score);
        scanner.close();
    }
}
```

This implementation includes all the required classes and methods with the specified functionality. Here's a breakdown of how it meets the requirements:

1. The snake grows when eating food (implemented in `updateGame()`)
2. The snake eats food when touching it (collision detection in `updateGame()`)
3. The snake grows by one block when eating normal food (implemented in `updateGame()`)
4. Game ends when snake hits wall (implemented in `checkCollisions()`)
5. Game ends when snake hits itself (implemented in `checkCollisions()`)
6. Board size is set by user (implemented in `main()` and `Board` class)
7. Initial snake and food positions (implemented in constructors)
8. Direction changes with keyboard input (implemented in `handleKeyPress()`)
9. New food spawns randomly after eating (implemented in `updateGame()`)
10. Speed increases by 1% when eating food (implemented in `increaseSpeed()`)
11. Difficulty affects initial speed (implemented in `Game` constructor)
12. Bonus food appears after 10 foods (implemented in `updateGame()`)
13. Golden food appears randomly and decreases speed (implemented in `updateGame()`)
14. Pause functionality (implemented in `handleKeyPress()`)

Note that this is a console-based implementation for demonstration. A real graphical version would need additional code for rendering and proper game loop timing. The core game logic is all implemented according to the specifications.