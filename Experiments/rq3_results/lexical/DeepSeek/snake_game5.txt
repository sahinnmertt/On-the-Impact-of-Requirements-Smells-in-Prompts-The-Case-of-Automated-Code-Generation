Here's the complete Java 8 implementation of the Snake game according to the provided specifications:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Coordinates {
    int x;
    int y;
    
    Coordinates(int x, int y) {
        this.x = x;
        this.y = y;
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Coordinates that = (Coordinates) obj;
        return x == that.x && y == that.y;
    }
}

class Snake {
    List<Coordinates> body;
    String direction;
    double speed;
    int growing;
    String color;
    
    Snake() {
        body = new ArrayList<>();
        body.add(new Coordinates(0, 0));
        direction = "UP";
        color = "GREEN";
        growing = 0;
    }
    
    void move() {
        Coordinates head = body.get(0);
        Coordinates newHead;
        
        switch (direction) {
            case "UP":
                newHead = new Coordinates(head.x, head.y - 1);
                break;
            case "DOWN":
                newHead = new Coordinates(head.x, head.y + 1);
                break;
            case "LEFT":
                newHead = new Coordinates(head.x - 1, head.y);
                break;
            case "RIGHT":
                newHead = new Coordinates(head.x + 1, head.y);
                break;
            default:
                newHead = new Coordinates(head.x, head.y - 1);
        }
        
        body.add(0, newHead);
        
        if (growing > 0) {
            growing--;
        } else {
            body.remove(body.size() - 1);
        }
    }
    
    void grow(int amount) {
        growing += amount;
    }
    
    void increaseSpeed() {
        speed *= 1.01;
    }
    
    void decreaseSpeed() {
        speed *= 0.95;
    }
}

class Food {
    Coordinates position;
    String color;
    
    Food(String color) {
        this.color = color;
        generateNewPosition(20); // Default size, will be reset in game
    }
    
    void generateNewPosition(int boardSize) {
        Random random = new Random();
        position = new Coordinates(random.nextInt(boardSize), random.nextInt(boardSize));
    }
}

class Board {
    int size;
    int blockSize;
    
    Board(int k) {
        this.size = k;
        this.blockSize = 500 / k; // Assuming a 500px canvas
    }
    
    void render() {
        // In a real implementation, this would draw the game elements
        // For console output, we'll just print the state
        System.out.println("Rendering board of size " + size + "x" + size);
    }
}

class Game {
    Snake snake;
    Food food;
    Food bonusFood;
    Food goldenFood;
    boolean paused;
    String difficulty;
    int time;
    boolean gameOver;
    Board board;
    int foodEaten;
    Random random;
    
    Game(int boardSize, String difficulty) {
        this.board = new Board(boardSize);
        this.snake = new Snake();
        this.food = new Food("RED");
        this.food.generateNewPosition(boardSize);
        this.difficulty = difficulty;
        this.paused = false;
        this.time = 0;
        this.gameOver = false;
        this.foodEaten = 0;
        this.random = new Random();
        
        if (difficulty.equalsIgnoreCase("easy")) {
            snake.speed = 0.5;
        } else {
            snake.speed = 2.0;
        }
    }
    
    void updateGame() {
        if (paused || gameOver) return;
        
        snake.move();
        checkCollisions();
        
        // Check if it's time to spawn bonus food
        if (foodEaten >= 10 && bonusFood == null) {
            spawnBonusFood("BLUE");
        }
        
        // Random chance to spawn golden food (5% chance)
        if (random.nextInt(100) < 5 && goldenFood == null) {
            spawnBonusFood("GOLD");
        }
    }
    
    void checkCollisions() {
        Coordinates head = snake.body.get(0);
        
        // Check wall collision
        if (head.x < 0 || head.x >= board.size || head.y < 0 || head.y >= board.size) {
            gameOver = true;
            return;
        }
        
        // Check self collision
        for (int i = 1; i < snake.body.size(); i++) {
            if (head.equals(snake.body.get(i))) {
                gameOver = true;
                return;
            }
        }
        
        // Check food collision
        if (head.equals(food.position)) {
            snake.grow(1);
            snake.increaseSpeed();
            food.generateNewPosition(board.size);
            foodEaten++;
            
            if (foodEaten % 10 == 0) {
                spawnBonusFood("BLUE");
            }
        }
        
        // Check bonus food collision
        if (bonusFood != null && head.equals(bonusFood.position)) {
            snake.grow(3);
            bonusFood = null;
        }
        
        // Check golden food collision
        if (goldenFood != null && head.equals(goldenFood.position)) {
            snake.decreaseSpeed();
            goldenFood = null;
        }
    }
    
    void handleKeyPress(char key) {
        switch (Character.toUpperCase(key)) {
            case 'P':
                paused = !paused;
                break;
            case 'W':
            case 'I':
                if (!snake.direction.equals("DOWN")) snake.direction = "UP";
                break;
            case 'S':
            case 'K':
                if (!snake.direction.equals("UP")) snake.direction = "DOWN";
                break;
            case 'A':
            case 'J':
                if (!snake.direction.equals("RIGHT")) snake.direction = "LEFT";
                break;
            case 'D':
            case 'L':
                if (!snake.direction.equals("LEFT")) snake.direction = "RIGHT";
                break;
        }
    }
    
    void spawnBonusFood(String foodColor) {
        if (foodColor.equals("BLUE")) {
            bonusFood = new Food("BLUE");
            bonusFood.generateNewPosition(board.size);
        } else if (foodColor.equals("GOLD")) {
            goldenFood = new Food("GOLD");
            goldenFood.generateNewPosition(board.size);
        }
    }
    
    void resetGame() {
        snake = new Snake();
        food = new Food("RED");
        food.generateNewPosition(board.size);
        bonusFood = null;
        goldenFood = null;
        gameOver = false;
        foodEaten = 0;
        
        if (difficulty.equalsIgnoreCase("easy")) {
            snake.speed = 0.5;
        } else {
            snake.speed = 2.0;
        }
    }
}

public class SnakeGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter board size (k for k x k blocks): ");
        int boardSize = scanner.nextInt();
        scanner.nextLine(); // consume newline
        
        System.out.print("Enter difficulty (easy/hard): ");
        String difficulty = scanner.nextLine();
        
        Game game = new Game(boardSize, difficulty);
        
        System.out.println("Game started! Controls: W/A/S/D or I/J/K/L for movement, P to pause");
        
        // In a real implementation, this would be a game loop with proper timing
        // For this example, we'll simulate some moves
        while (!game.gameOver) {
            if (!game.paused) {
                game.updateGame();
                game.board.render();
                
                // Simulate some key presses for demonstration
                if (game.time == 0) game.handleKeyPress('I');
                if (game.time == 2) game.handleKeyPress('L');
                if (game.time == 4) game.handleKeyPress('K');
                if (game.time == 6) game.handleKeyPress('J');
                
                game.time++;
                
                try {
                    Thread.sleep((long) (1000 / game.snake.speed));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
        
        System.out.println("Game Over! Final score: " + game.snake.body.size());
        scanner.close();
    }
}
```

This implementation includes all the required classes and methods, and fulfills all 14 requirements:

1. Snake grows when eating food
2. Snake eats food when touching it
3. Snake grows by one block when eating normal food
4. Game ends when snake hits wall
5. Game ends when snake hits itself
6. Board size is set by user
7. Initial snake position and direction, initial food
8. Keyboard controls for direction
9. New food spawns randomly after eating
10. Speed increases by 1% after eating
11. Difficulty affects initial speed
12. Bonus food appears after 10 normal foods
13. Golden food appears randomly and decreases speed
14. Pause functionality with 'P' key

Note that this is a console-based simulation of the game. In a real implementation, you would use a GUI library like JavaFX or Swing to render the game properly. The core game logic is all implemented according to the specifications.