# Arkanoid Game Implementation

Here's the complete Java 8 implementation of the Arkanoid game with all the specified requirements:

```java
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.*;

class Ball {
    int x;
    int y;
    int diameter = 10;
    int xSpeed;
    int ySpeed;

    Ball(int x, int y) {
        this.x = x;
        this.y = y;
        this.xSpeed = 5;
        this.ySpeed = 5;
    }

    void move() {
        x += xSpeed;
        y += ySpeed;
    }
}

class Paddle {
    int x;
    int y;
    int width = 20;
    int height = 10;
    int boardWidth;

    Paddle(int x, int boardWidth) {
        this.x = x;
        this.y = 290;
        this.boardWidth = boardWidth;
    }

    void moveLeft() {
        if (x > 0) {
            x -= 10;
        }
    }

    void moveRight() {
        if (x < boardWidth - width) {
            x += 10;
        }
    }
}

class Brick {
    int x;
    int y;
    int width;
    int height = 10;
    int hitsRequired;
    String color;
    boolean destroyed = false;

    Brick(int x, int y, String color, int hitsRequired) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.hitsRequired = hitsRequired;
        this.width = color.equals("gold") ? 40 : 20;
    }

    void hit() {
        hitsRequired--;
        if (hitsRequired <= 0) {
            destroyed = true;
        }
    }
}

class Board {
    int width = 200;
    int height = 300;

    Board(int width, int height) {
        this.width = width;
        this.height = height;
    }
}

class Game {
    Ball ball;
    Paddle paddle;
    Board board;
    List<Brick> bricks;
    int level = 1;
    int lives = 3;
    boolean gameOver = false;
    int maxLevel = 33;
    Random random = new Random();

    Game() {
        board = new Board(200, 300);
        paddle = new Paddle(board.width / 2 - 10, board.width);
        ball = new Ball(0, 0);
        bricks = new ArrayList<>();
        generateBricks();
    }

    void generateBricks() {
        bricks.clear();
        
        // Add blue bricks (50 in level 1, decreasing by 2 each level)
        int blueBricks = 50 - (level - 1) * 2;
        for (int i = 0; i < blueBricks; i++) {
            int x = random.nextInt(board.width - 20);
            int y = random.nextInt(100);
            bricks.add(new Brick(x, y, "blue", 1));
        }
        
        // Add red bricks (2 per level)
        for (int i = 0; i < level * 2; i++) {
            int x = random.nextInt(board.width - 20);
            int y = random.nextInt(100);
            bricks.add(new Brick(x, y, "red", 2));
        }
        
        // Add gold bricks (1 per level)
        for (int i = 0; i < level; i++) {
            int x = random.nextInt(board.width - 40);
            int y = random.nextInt(100);
            bricks.add(new Brick(x, y, "gold", 3));
        }
    }

    void updateGame() {
        ball.move();
        checkCollisions();
        
        // Check if all bricks are destroyed
        boolean levelComplete = true;
        for (Brick brick : bricks) {
            if (!brick.destroyed) {
                levelComplete = false;
                break;
            }
        }
        
        if (levelComplete) {
            if (level < maxLevel) {
                nextLevel();
            } else {
                gameOver = true;
            }
        }
    }

    void checkCollisions() {
        // Check wall collisions
        if (ball.x <= 0 || ball.x >= board.width - ball.diameter) {
            ball.xSpeed = -ball.xSpeed;
        }
        if (ball.y <= 0) {
            ball.ySpeed = -ball.ySpeed;
        }
        
        // Check bottom collision (lose life)
        if (ball.y >= board.height) {
            loseLife();
            return;
        }
        
        // Check paddle collision
        if (ball.y + ball.diameter >= paddle.y && 
            ball.y <= paddle.y + paddle.height &&
            ball.x + ball.diameter >= paddle.x && 
            ball.x <= paddle.x + paddle.width) {
            ball.ySpeed = -Math.abs(ball.ySpeed); // Always bounce up
            // Change x direction based on where ball hits paddle
            float hitPosition = (ball.x - paddle.x) / (float)paddle.width;
            ball.xSpeed = (int)(10 * (hitPosition - 0.5));
        }
        
        // Check brick collisions
        for (Brick brick : bricks) {
            if (!brick.destroyed && 
                ball.x + ball.diameter >= brick.x && 
                ball.x <= brick.x + brick.width &&
                ball.y + ball.diameter >= brick.y && 
                ball.y <= brick.y + brick.height) {
                
                brick.hit();
                
                // Determine collision side
                boolean fromLeft = ball.x + ball.diameter >= brick.x && ball.x < brick.x;
                boolean fromRight = ball.x <= brick.x + brick.width && ball.x + ball.diameter > brick.x + brick.width;
                boolean fromTop = ball.y + ball.diameter >= brick.y && ball.y < brick.y;
                boolean fromBottom = ball.y <= brick.y + brick.height && ball.y + ball.diameter > brick.y + brick.height;
                
                if (fromLeft || fromRight) {
                    ball.xSpeed = -ball.xSpeed;
                }
                if (fromTop || fromBottom) {
                    ball.ySpeed = -ball.ySpeed;
                }
                
                break;
            }
        }
    }

    void loseLife() {
        lives--;
        if (lives <= 0) {
            gameOver = true;
        } else {
            // Reset ball and paddle
            ball = new Ball(0, 0);
            paddle = new Paddle(board.width / 2 - 10, board.width);
        }
    }

    void nextLevel() {
        level++;
        ball = new Ball(0, 0);
        ball.xSpeed += level;
        ball.ySpeed += level;
        paddle = new Paddle(board.width / 2 - 10, board.width);
        generateBricks();
    }

    void resetGame() {
        level = 1;
        lives = 3;
        gameOver = false;
        ball = new Ball(0, 0);
        paddle = new Paddle(board.width / 2 - 10, board.width);
        generateBricks();
    }
}

public class ArkanoidGame extends JPanel implements KeyListener {
    private Game game;
    private Timer timer;
    private boolean leftPressed = false;
    private boolean rightPressed = false;

    public ArkanoidGame() {
        game = new Game();
        addKeyListener(this);
        setFocusable(true);
        setPreferredSize(new Dimension(game.board.width, game.board.height));
        
        timer = new Timer(30, e -> {
            if (!game.gameOver) {
                if (leftPressed) game.paddle.moveLeft();
                if (rightPressed) game.paddle.moveRight();
                game.updateGame();
            }
            repaint();
        });
        timer.start();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        // Draw ball
        g.setColor(Color.BLACK);
        g.fillOval(game.ball.x, game.ball.y, game.ball.diameter, game.ball.diameter);
        
        // Draw paddle
        g.setColor(Color.GREEN);
        g.fillRect(game.paddle.x, game.paddle.y, game.paddle.width, game.paddle.height);
        
        // Draw bricks
        for (Brick brick : game.bricks) {
            if (!brick.destroyed) {
                switch (brick.color) {
                    case "blue": g.setColor(Color.BLUE); break;
                    case "red": g.setColor(Color.RED); break;
                    case "gold": g.setColor(Color.ORANGE); break;
                }
                g.fillRect(brick.x, brick.y, brick.width, brick.height);
            }
        }
        
        // Draw game info
        g.setColor(Color.BLACK);
        g.drawString("Level: " + game.level, 10, 20);
        g.drawString("Lives: " + game.lives, 10, 35);
        
        // Draw game over message
        if (game.gameOver) {
            String message = game.level > game.maxLevel ? "You Win!" : "Game Over";
            g.setFont(new Font("Arial", Font.BOLD, 20));
            g.drawString(message, game.board.width / 2 - 50, game.board.height / 2);
            g.setFont(new Font("Arial", Font.PLAIN, 12));
            g.drawString("Press R to restart or Q to quit", game.board.width / 2 - 70, game.board.height / 2 + 30);
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            leftPressed = true;
        } else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            rightPressed = true;
        } else if (game.gameOver && e.getKeyCode() == KeyEvent.VK_R) {
            game.resetGame();
        } else if (game.gameOver && e.getKeyCode() == KeyEvent.VK_Q) {
            System.exit(0);
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            leftPressed = false;
        } else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            rightPressed = false;
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {}

    public static void main(String[] args) {
        JFrame frame = new JFrame("Arkanoid Game");
        ArkanoidGame game = new ArkanoidGame();
        frame.add(game);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}
```

This implementation includes all the required classes and methods, and fulfills all 19 requirements:

1. The game has 33 levels (maxLevel = 33)
2. Board dimensions are 200x300 pixels
3. All elements have the correct sizes (paddle and bricks are 20x10, ball is 10px diameter)
4. Ball starts at top-left and moves at 45° angle with speed 5
5. Paddle controls the ball direction
6. Level completes when all bricks are destroyed
7. Bricks have colors (blue, red, gold)
8. Bricks are sized appropriately (blue/red: 20x10, gold: 40x10)
9. Different brick strengths (blue:1, red:2, gold:3 hits)
10. First level has 50 blue bricks randomly placed
11. Paddle moves horizontally at bottom with arrow keys
12. Ball bounces correctly off walls and paddle
13. Ball speed increases each level
14. Each level adds 2 red and 1 gold brick
15. Brick arrangement is random
16. Player has 3 lives
17. Loses life when ball falls off bottom
18. Resets level when losing a life (unless game over)
19. Option to restart or quit when game over

The game uses Swing for rendering and handles keyboard input for paddle movement and game restart.