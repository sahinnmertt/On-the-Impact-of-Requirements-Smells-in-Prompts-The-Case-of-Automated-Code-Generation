# Snake Game in Java 8

Here's a complete implementation of the Snake game according to all the specified requirements:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Coordinates {
    int x;
    int y;
    
    Coordinates(int x, int y) {
        this.x = x;
        this.y = y;
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Coordinates that = (Coordinates) obj;
        return x == that.x && y == that.y;
    }
}

class Snake {
    List<Coordinates> body;
    String direction;
    double speed;
    int growing;
    String color;
    
    Snake() {
        this.body = new ArrayList<>();
        this.body.add(new Coordinates(0, 0));
        this.direction = "UP";
        this.color = "GREEN";
        this.growing = 0;
    }
    
    void move() {
        Coordinates head = body.get(0);
        Coordinates newHead;
        
        switch (direction) {
            case "UP":
                newHead = new Coordinates(head.x, head.y - 1);
                break;
            case "DOWN":
                newHead = new Coordinates(head.x, head.y + 1);
                break;
            case "LEFT":
                newHead = new Coordinates(head.x - 1, head.y);
                break;
            case "RIGHT":
                newHead = new Coordinates(head.x + 1, head.y);
                break;
            default:
                newHead = new Coordinates(head.x, head.y - 1);
        }
        
        body.add(0, newHead);
        
        if (growing > 0) {
            growing--;
        } else {
            body.remove(body.size() - 1);
        }
    }
    
    void grow(int amount) {
        this.growing += amount;
    }
    
    void increaseSpeed() {
        this.speed *= 1.01;
    }
    
    void decreaseSpeed() {
        this.speed *= 0.95;
    }
}

class Food {
    Coordinates position;
    String color;
    
    Food(String color) {
        this.color = color;
        this.position = new Coordinates(0, 0);
    }
    
    void generateNewPosition(int boardSize) {
        Random random = new Random();
        this.position = new Coordinates(random.nextInt(boardSize), random.nextInt(boardSize));
    }
}

class Board {
    int size;
    int blockSize;
    
    Board(int k) {
        this.size = k;
        this.blockSize = 500 / k; // Assuming a 500px canvas
    }
    
    void render(Snake snake, Food food, Food bonusFood) {
        // In a real implementation, this would draw the game state
        System.out.println("Rendering board...");
        System.out.println("Snake position: " + snake.body.get(0).x + "," + snake.body.get(0).y);
        System.out.println("Food position: " + food.position.x + "," + food.position.y);
        if (bonusFood != null) {
            System.out.println("Bonus food position: " + bonusFood.position.x + "," + bonusFood.position.y);
        }
    }
}

class Game {
    Snake snake;
    Food food;
    Food bonusFood;
    Food goldenFood;
    boolean paused;
    String difficulty;
    int time;
    boolean gameOver;
    Board board;
    int foodEaten;
    int goldenFoodTimer;
    
    Game(int boardSize, String difficulty) {
        this.board = new Board(boardSize);
        this.snake = new Snake();
        this.food = new Food("RED");
        this.food.generateNewPosition(boardSize);
        this.difficulty = difficulty;
        this.snake.speed = difficulty.equalsIgnoreCase("easy") ? 0.5 : 2.0;
        this.paused = false;
        this.time = 0;
        this.gameOver = false;
        this.foodEaten = 0;
        this.goldenFoodTimer = 0;
    }
    
    void updateGame() {
        if (paused || gameOver) return;
        
        snake.move();
        
        // Check if snake ate food
        if (snake.body.get(0).equals(food.position)) {
            snake.grow(1);
            snake.increaseSpeed();
            food.generateNewPosition(board.size);
            foodEaten++;
            
            if (foodEaten % 10 == 0) {
                spawnBonusFood("BLUE");
            }
            
            // Random chance to spawn golden food (1 in 10 chance)
            if (new Random().nextInt(10) == 0) {
                spawnBonusFood("GOLD");
                goldenFoodTimer = 50; // Golden food lasts for 50 updates
            }
        }
        
        // Check if snake ate bonus food
        if (bonusFood != null && snake.body.get(0).equals(bonusFood.position)) {
            snake.grow(3);
            bonusFood = null;
        }
        
        // Check if snake ate golden food
        if (goldenFood != null && snake.body.get(0).equals(goldenFood.position)) {
            snake.decreaseSpeed();
            goldenFood = null;
        }
        
        // Decrement golden food timer
        if (goldenFood != null) {
            goldenFoodTimer--;
            if (goldenFoodTimer <= 0) {
                goldenFood = null;
            }
        }
        
        checkCollisions();
        time++;
    }
    
    void checkCollisions() {
        Coordinates head = snake.body.get(0);
        
        // Check wall collision
        if (head.x < 0 || head.x >= board.size || head.y < 0 || head.y >= board.size) {
            gameOver = true;
            return;
        }
        
        // Check self collision
        for (int i = 1; i < snake.body.size(); i++) {
            if (head.equals(snake.body.get(i))) {
                gameOver = true;
                return;
            }
        }
    }
    
    void handleKeyPress(char key) {
        if (key == 'p') {
            paused = !paused;
            return;
        }
        
        if (paused) return;
        
        switch (Character.toUpperCase(key)) {
            case 'W':
                if (!snake.direction.equals("DOWN")) snake.direction = "UP";
                break;
            case 'S':
                if (!snake.direction.equals("UP")) snake.direction = "DOWN";
                break;
            case 'A':
                if (!snake.direction.equals("RIGHT")) snake.direction = "LEFT";
                break;
            case 'D':
                if (!snake.direction.equals("LEFT")) snake.direction = "RIGHT";
                break;
        }
    }
    
    void spawnBonusFood(String foodColor) {
        if (foodColor.equals("BLUE")) {
            bonusFood = new Food("BLUE");
            bonusFood.generateNewPosition(board.size);
        } else if (foodColor.equals("GOLD")) {
            goldenFood = new Food("GOLD");
            goldenFood.generateNewPosition(board.size);
        }
    }
    
    void resetGame() {
        this.snake = new Snake();
        this.food = new Food("RED");
        this.food.generateNewPosition(board.size);
        this.snake.speed = difficulty.equalsIgnoreCase("easy") ? 0.5 : 2.0;
        this.paused = false;
        this.time = 0;
        this.gameOver = false;
        this.foodEaten = 0;
        this.bonusFood = null;
        this.goldenFood = null;
    }
}

public class SnakeGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter board size (k for k x k blocks): ");
        int boardSize = scanner.nextInt();
        scanner.nextLine(); // consume newline
        
        System.out.print("Enter difficulty (easy/hard): ");
        String difficulty = scanner.nextLine();
        
        Game game = new Game(boardSize, difficulty);
        
        System.out.println("Game started! Controls: W (up), S (down), A (left), D (right), P (pause)");
        
        // Simple console-based game loop
        while (true) {
            if (!game.gameOver && !game.paused) {
                game.updateGame();
                game.board.render(game.snake, game.food, game.bonusFood);
                
                if (game.gameOver) {
                    System.out.println("Game Over! Press R to restart or Q to quit.");
                }
            }
            
            if (System.in.available() > 0) {
                char input = (char) System.in.read();
                if (game.gameOver && Character.toUpperCase(input) == 'R') {
                    game.resetGame();
                } else if (game.gameOver && Character.toUpperCase(input) == 'Q') {
                    break;
                } else {
                    game.handleKeyPress(input);
                }
            }
            
            try {
                // Adjust sleep time based on snake speed
                long sleepTime = (long) (1000 / game.snake.speed);
                Thread.sleep(sleepTime);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        
        scanner.close();
    }
}
```

This implementation includes:

1. All required classes (Snake, Food, Board, Coordinates, Game, SnakeGame)
2. All specified attributes and methods
3. Game mechanics:
   - Snake movement and growth
   - Food consumption and regeneration
   - Collision detection (walls and self)
   - Speed adjustments
   - Bonus food spawning
   - Golden food with speed decrease
   - Pause functionality
   - Difficulty levels
4. Console-based interface for simplicity (in a real application, you'd use a GUI framework)

The game follows all 14 requirements:
1. Goal is to grow the snake by eating food
2. Snake eats food when passing over it
3. Snake grows by one block when eating normal food
4. Game over when hitting walls
5. Game over when hitting own body
6. Customizable board size
7. Initial snake position and direction
8. Keyboard controls for direction
9. New food spawns randomly after eating
10. Speed increases by 1% after eating
11. Difficulty levels affect initial speed
12. Bonus food appears after 10 foods eaten
13. Golden food appears randomly and decreases speed
14. Pause functionality with 'p' key

Note that this is a console implementation for simplicity. In a real application, you would use a GUI framework like JavaFX or Swing for proper rendering. The core game logic remains the same.