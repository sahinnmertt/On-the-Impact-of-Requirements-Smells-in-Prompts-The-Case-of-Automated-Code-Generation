Here's the complete Java 8 implementation of the Scopa card game with three players, following all the specified requirements:

```java
import java.util.*;
import java.util.stream.*;

class Card {
    String suit;
    int value;

    Card(String suit, int value) {
        this.suit = suit;
        this.value = value;
    }

    int getValue() {
        return value;
    }

    String getSuit() {
        return suit;
    }

    @Override
    public String toString() {
        return value + " of " + suit;
    }
}

class Player {
    String name;
    int score;
    int specialPoints;
    List<Card> hand;
    List<Card> discardPile;

    Player(String name) {
        this.name = name;
        this.score = 0;
        this.specialPoints = 0;
        this.hand = new ArrayList<>();
        this.discardPile = new ArrayList<>();
    }

    Card playCard(int cardIndex) {
        return hand.remove(cardIndex);
    }

    void addToDiscardPile(List<Card> capturedCards) {
        discardPile.addAll(capturedCards);
    }

    void clearTableCapture() {
        specialPoints++;
    }

    int getTotalCards() {
        return discardPile.size();
    }

    int getCoinsCount() {
        return (int) discardPile.stream().filter(card -> card.getSuit().equals("Coins")).count();
    }

    boolean hasSevenOfCoins() {
        return discardPile.stream().anyMatch(card -> card.getSuit().equals("Coins") && card.getValue() == 7);
    }

    int getSumOfCards() {
        return discardPile.stream().mapToInt(Card::getValue).sum();
    }

    void addToHand(Card card) {
        hand.add(card);
    }

    void clearHand() {
        hand.clear();
    }

    void clearDiscardPile() {
        discardPile.clear();
    }
}

class Game {
    List<Player> players;
    List<Card> deck;
    List<Card> tableCards;
    List<Integer> turnOrder;
    boolean roundOver;
    boolean gameOver;
    int roundCount;

    Game() {
        players = new ArrayList<>();
        deck = new ArrayList<>();
        tableCards = new ArrayList<>();
        turnOrder = new ArrayList<>();
        roundOver = false;
        gameOver = false;
        roundCount = 0;
    }

    void initializeGame() {
        // Initialize players
        players.add(new Player("Alice"));
        players.add(new Player("Bob"));
        players.add(new Player("Charlie"));

        // Initialize deck
        String[] suits = {"Coins", "Cups", "Swords", "Clubs"};
        for (String suit : suits) {
            for (int value = 1; value <= 10; value++) {
                deck.add(new Card(suit, value));
            }
        }

        // Shuffle deck
        Collections.shuffle(deck);

        // Determine turn order
        turnOrder = IntStream.range(0, 3).boxed().collect(Collectors.toList());
        Collections.shuffle(turnOrder);

        // Deal initial cards
        for (Player player : players) {
            for (int i = 0; i < 3; i++) {
                player.addToHand(deck.remove(0));
            }
        }

        // Place initial table cards
        for (int i = 0; i < 4; i++) {
            tableCards.add(deck.remove(0));
        }

        roundCount++;
    }

    void playTurn(Player player) {
        if (player.hand.isEmpty()) {
            if (!deck.isEmpty()) {
                for (int i = 0; i < 3 && !deck.isEmpty(); i++) {
                    player.addToHand(deck.remove(0));
                }
            } else {
                roundOver = true;
                return;
            }
        }

        // For simplicity, AI chooses first card in hand
        int cardIndex = 0;
        Card playedCard = player.playCard(cardIndex);

        // Check for matches
        List<List<Card>> possibleCaptures = new ArrayList<>();
        
        // Check single card matches
        for (Card tableCard : tableCards) {
            if (tableCard.getValue() == playedCard.getValue()) {
                possibleCaptures.add(Collections.singletonList(tableCard));
            }
        }

        // Check multiple card sum matches
        for (int i = 2; i <= tableCards.size(); i++) {
            List<List<Card>> combinations = generateCombinations(tableCards, i);
            for (List<Card> combo : combinations) {
                int sum = combo.stream().mapToInt(Card::getValue).sum();
                if (sum == playedCard.getValue()) {
                    possibleCaptures.add(combo);
                }
            }
        }

        if (!possibleCaptures.isEmpty()) {
            // For simplicity, choose the first possible capture
            List<Card> capturedCards = possibleCaptures.get(0);
            player.addToDiscardPile(capturedCards);
            player.addToDiscardPile(Collections.singletonList(playedCard));
            tableCards.removeAll(capturedCards);

            if (tableCards.isEmpty()) {
                player.clearTableCapture();
            }
        } else {
            tableCards.add(playedCard);
        }
    }

    private List<List<Card>> generateCombinations(List<Card> cards, int k) {
        List<List<Card>> result = new ArrayList<>();
        generateCombinationsHelper(cards, k, 0, new ArrayList<>(), result);
        return result;
    }

    private void generateCombinationsHelper(List<Card> cards, int k, int start, List<Card> current, List<List<Card>> result) {
        if (current.size() == k) {
            result.add(new ArrayList<>(current));
            return;
        }
        for (int i = start; i < cards.size(); i++) {
            current.add(cards.get(i));
            generateCombinationsHelper(cards, k, i + 1, current, result);
            current.remove(current.size() - 1);
        }
    }

    void handleRoundEnd() {
        // Give remaining table cards to last player who captured
        if (!tableCards.isEmpty()) {
            Player lastCapturingPlayer = findLastCapturingPlayer();
            if (lastCapturingPlayer != null) {
                lastCapturingPlayer.addToDiscardPile(new ArrayList<>(tableCards));
                tableCards.clear();
            }
        }

        calculateFinalScores();
    }

    private Player findLastCapturingPlayer() {
        for (int i = turnOrder.size() - 1; i >= 0; i--) {
            Player player = players.get(turnOrder.get(i));
            if (!player.discardPile.isEmpty()) {
                return player;
            }
        }
        return null;
    }

    void calculateFinalScores() {
        // Calculate points from special captures
        for (Player player : players) {
            player.score += player.specialPoints;
            player.specialPoints = 0;
        }

        // Calculate additional points
        int maxCards = players.stream().mapToInt(Player::getTotalCards).max().orElse(0);
        int maxCoins = players.stream().mapToInt(Player::getCoinsCount).max().orElse(0);
        int maxSum = players.stream().mapToInt(Player::getSumOfCards).max().orElse(0);

        for (Player player : players) {
            if (player.getTotalCards() == maxCards && maxCards > 0) {
                player.score++;
            }
            if (player.getCoinsCount() == maxCoins && maxCoins > 0) {
                player.score++;
            }
            if (player.hasSevenOfCoins()) {
                player.score++;
            }
            if (player.getSumOfCards() == maxSum && maxSum > 0) {
                player.score++;
            }
        }

        // Check for game over
        if (players.stream().anyMatch(p -> p.score >= 8)) {
            gameOver = true;
        }
    }

    void declareWinner() {
        Player winner = players.stream()
                .max(Comparator.comparingInt(p -> p.score))
                .orElse(null);

        if (winner != null) {
            System.out.println("The winner is " + winner.name + " with a score of " + winner.score + "!");
        } else {
            System.out.println("No winner could be determined.");
        }
    }

    void playGame() {
        initializeGame();

        while (!gameOver) {
            System.out.println("\nRound " + roundCount + " begins!");

            while (!roundOver) {
                for (int playerIndex : turnOrder) {
                    Player currentPlayer = players.get(playerIndex);
                    playTurn(currentPlayer);

                    if (roundOver) {
                        break;
                    }
                }
            }

            handleRoundEnd();
            printScores();

            if (!gameOver) {
                // Prepare for next round
                roundOver = false;
                deck.clear();
                tableCards.clear();
                turnOrder.clear();

                // Reinitialize deck
                String[] suits = {"Coins", "Cups", "Swords", "Clubs"};
                for (String suit : suits) {
                    for (int value = 1; value <= 10; value++) {
                        deck.add(new Card(suit, value));
                    }
                }

                Collections.shuffle(deck);

                // Clear player hands and discard piles
                for (Player player : players) {
                    player.clearHand();
                    player.clearDiscardPile();
                }

                // Deal new cards
                for (Player player : players) {
                    for (int i = 0; i < 3; i++) {
                        player.addToHand(deck.remove(0));
                    }
                }

                // Place new table cards
                for (int i = 0; i < 4; i++) {
                    tableCards.add(deck.remove(0));
                }

                // Determine new turn order (random)
                Collections.shuffle(turnOrder);
                turnOrder = IntStream.range(0, 3).boxed().collect(Collectors.toList());
                Collections.shuffle(turnOrder);

                roundCount++;
            }
        }

        declareWinner();
    }

    void printScores() {
        System.out.println("\nCurrent Scores:");
        for (Player player : players) {
            System.out.println(player.name + ": " + player.score);
        }
    }
}

public class ScopaGame {
    public static void main(String[] args) {
        Game game = new Game();
        game.playGame();
    }
}
```

This implementation includes:

1. All required classes (Player, Card, Game, ScopaGame)
2. All specified attributes and methods
3. The complete game logic following all 16 requirements
4. AI players that make simple decisions (always choosing the first card in hand and first possible capture)
5. Multiple rounds until a player reaches the winning score of 8
6. Proper scoring including special points for clearing the table
7. End-of-round scoring for most cards, most coins, seven of coins, and highest sum
8. Random turn order determination at the start of each game

The game can be run by executing the main method in the ScopaGame class. The AI players make simple decisions for demonstration purposes, but the core game mechanics are fully implemented according to the specifications.