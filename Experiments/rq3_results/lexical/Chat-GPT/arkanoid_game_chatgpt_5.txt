Below is a complete Java 8 application for an Arkanoid game that adheres to the provided specifications and requirements. The code is structured according to the class and method skeletons you provided.

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Ball {
    int x, y, diameter = 10, xSpeed = 5, ySpeed = 5;

    Ball(int x, int y) {
        this.x = x;
        this.y = y;
    }

    void move() {
        x += xSpeed;
        y += ySpeed;
    }
}

class Paddle {
    int x, y, width = 20, height = 10;

    Paddle(int x) {
        this.x = x;
        this.y = 290; // Bottom of the board
    }

    void moveLeft() {
        if (x > 0) x -= 5;
    }

    void moveRight() {
        if (x < 180) x += 5; // Board width - paddle width
    }
}

class Brick {
    int x, y, width, height, hitsRequired;
    String color;
    boolean destroyed = false;

    Brick(int x, int y, String color, int hitsRequired) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.hitsRequired = hitsRequired;
        this.width = color.equals("gold") ? 40 : 20;
        this.height = 10;
    }

    void hit() {
        hitsRequired--;
        if (hitsRequired <= 0) destroyed = true;
    }
}

class Board {
    int width, height;

    Board(int width, int height) {
        this.width = width;
        this.height = height;
    }
}

class Game {
    Ball ball;
    Paddle paddle;
    Board board;
    List<Brick> bricks;
    int level = 1, lives = 3, maxLevel = 33;
    boolean gameOver = false;

    Game() {
        board = new Board(200, 300);
        resetGame();
    }

    void generateBricks() {
        bricks = new ArrayList<>();
        Random rand = new Random();
        for (int i = 0; i < 50; i++) {
            int x = rand.nextInt(10) * 20;
            int y = rand.nextInt(10) * 10;
            bricks.add(new Brick(x, y, "blue", 1));
        }
        for (int i = 0; i < level - 1; i++) {
            int x = rand.nextInt(10) * 20;
            int y = rand.nextInt(10) * 10;
            bricks.add(new Brick(x, y, "red", 2));
        }
        for (int i = 0; i < (level - 1) / 2; i++) {
            int x = rand.nextInt(10) * 20;
            int y = rand.nextInt(10) * 10;
            bricks.add(new Brick(x, y, "gold", 3));
        }
    }

    void updateGame() {
        ball.move();
        checkCollisions();
        if (bricks.stream().allMatch(b -> b.destroyed)) {
            nextLevel();
        }
    }

    void checkCollisions() {
        if (ball.x <= 0 || ball.x >= board.width - ball.diameter) ball.xSpeed *= -1;
        if (ball.y <= 0) ball.ySpeed *= -1;
        if (ball.y >= board.height - ball.diameter) loseLife();

        if (ball.y + ball.diameter >= paddle.y && ball.x >= paddle.x && ball.x <= paddle.x + paddle.width) {
            ball.ySpeed *= -1;
        }

        for (Brick brick : bricks) {
            if (!brick.destroyed && ball.x + ball.diameter >= brick.x && ball.x <= brick.x + brick.width &&
                ball.y + ball.diameter >= brick.y && ball.y <= brick.y + brick.height) {
                brick.hit();
                ball.ySpeed *= -1;
            }
        }
    }

    void loseLife() {
        lives--;
        if (lives <= 0) {
            gameOver = true;
        } else {
            resetLevel();
        }
    }

    void nextLevel() {
        if (level < maxLevel) {
            level++;
            ball.xSpeed += 1;
            ball.ySpeed += 1;
            resetLevel();
        } else {
            gameOver = true;
        }
    }

    void resetLevel() {
        ball = new Ball(0, 0);
        paddle = new Paddle(90);
        generateBricks();
    }

    void resetGame() {
        level = 1;
        lives = 3;
        gameOver = false;
        resetLevel();
    }
}

public class ArkanoidGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean playAgain;
        do {
            Game game = new Game();
            while (!game.gameOver) {
                game.updateGame();
                // Simulate user input for paddle movement
                // game.paddle.moveLeft() or game.paddle.moveRight()
            }
            System.out.println("Game Over! Do you want to play again? (yes/no)");
            playAgain = scanner.next().equalsIgnoreCase("yes");
        } while (playAgain);
        scanner.close();
    }
}
```

### Explanation:
- **Ball Class**: Manages the ball's position and movement.
- **Paddle Class**: Manages the paddle's position and movement.
- **Brick Class**: Manages the brick's state and destruction.
- **Board Class**: Represents the game board's dimensions.
- **Game Class**: Manages the game state, including levels, lives, and game logic.
- **ArkanoidGame Class**: Contains the main method to run the game loop and handle user input for restarting the game.

This code provides a basic framework for the Arkanoid game, implementing the specified requirements. Note that the actual rendering and user input handling (e.g., moving the paddle with arrow keys) would require a graphical library such as Java Swing or JavaFX, which is not included in this text-based implementation.