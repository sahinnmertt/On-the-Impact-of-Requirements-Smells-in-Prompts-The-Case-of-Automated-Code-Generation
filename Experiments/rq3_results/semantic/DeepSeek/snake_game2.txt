Here's the complete implementation of the Snake game in Java 8, adhering to all the specified requirements:

```java
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

class Coordinates {
    int x;
    int y;
    
    Coordinates(int x, int y) {
        this.x = x;
        this.y = y;
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Coordinates that = (Coordinates) obj;
        return x == that.x && y == that.y;
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(x, y);
    }
}

class Snake {
    List<Coordinates> body;
    String direction;
    double speed;
    int growing;
    String color;
    
    Snake() {
        body = new ArrayList<>();
        body.add(new Coordinates(0, 0));
        direction = "UP";
        speed = 0.5;
        growing = 0;
        color = "GREEN";
    }
    
    void move() {
        Coordinates head = body.get(0);
        Coordinates newHead;
        
        switch (direction) {
            case "UP":
                newHead = new Coordinates(head.x, head.y - 1);
                break;
            case "DOWN":
                newHead = new Coordinates(head.x, head.y + 1);
                break;
            case "LEFT":
                newHead = new Coordinates(head.x - 1, head.y);
                break;
            case "RIGHT":
                newHead = new Coordinates(head.x + 1, head.y);
                break;
            default:
                newHead = new Coordinates(head.x, head.y - 1);
        }
        
        body.add(0, newHead);
        
        if (growing > 0) {
            growing--;
        } else {
            body.remove(body.size() - 1);
        }
    }
    
    void grow(int amount) {
        growing += amount;
    }
    
    void increaseSpeed() {
        speed *= 1.01;
    }
    
    void decreaseSpeed() {
        speed *= 0.95;
    }
}

class Food {
    Coordinates position;
    String color;
    
    Food(String color) {
        this.color = color;
        generateNewPosition(20); // Default size, will be updated in game
    }
    
    void generateNewPosition(int boardSize) {
        Random random = new Random();
        position = new Coordinates(random.nextInt(boardSize), random.nextInt(boardSize));
    }
}

class Board extends JPanel {
    int size;
    int blockSize;
    Snake snake;
    Food food;
    Food bonusFood;
    Food goldenFood;
    
    Board(int k) {
        size = k;
        blockSize = 5;
        setPreferredSize(new Dimension(size * blockSize, size * blockSize));
        setBackground(Color.BLACK);
    }
    
    void render() {
        repaint();
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        // Draw snake
        g.setColor(Color.GREEN);
        for (Coordinates coord : snake.body) {
            g.fillRect(coord.x * blockSize, coord.y * blockSize, blockSize, blockSize);
        }
        
        // Draw regular food
        g.setColor(Color.RED);
        if (food != null) {
            g.fillRect(food.position.x * blockSize, food.position.y * blockSize, blockSize, blockSize);
        }
        
        // Draw bonus food
        if (bonusFood != null) {
            g.setColor(Color.BLUE);
            g.fillRect(bonusFood.position.x * blockSize, bonusFood.position.y * blockSize, blockSize, blockSize);
        }
        
        // Draw golden food
        if (goldenFood != null) {
            g.setColor(Color.YELLOW);
            g.fillRect(goldenFood.position.x * blockSize, goldenFood.position.y * blockSize, blockSize, blockSize);
        }
    }
}

class Game {
    Snake snake;
    Food food;
    Food bonusFood;
    Food goldenFood;
    boolean paused;
    String difficulty;
    int time;
    boolean gameOver;
    Board board;
    int foodEaten;
    Timer timer;
    int boardSize;
    
    Game(int boardSize, String difficulty) {
        this.boardSize = boardSize;
        this.difficulty = difficulty;
        board = new Board(boardSize * 5); // 5 pixels per block
        snake = new Snake();
        if (difficulty.equals("easy")) {
            snake.speed = 0.5;
        } else {
            snake.speed = 1.0;
        }
        food = new Food("RED");
        food.generateNewPosition(boardSize);
        paused = false;
        time = 0;
        gameOver = false;
        foodEaten = 0;
        
        // Set up timer
        timer = new Timer((int)(1000 / snake.speed), e -> {
            if (!paused && !gameOver) {
                updateGame();
            }
        });
        timer.start();
        
        // Timer for game time
        new Timer(1000, e -> {
            if (!paused && !gameOver) {
                time++;
                if (time % 300 == 0) { // 5 minutes = 300 seconds
                    spawnBonusFood("YELLOW");
                }
            }
        }).start();
    }
    
    void updateGame() {
        snake.move();
        checkCollisions();
        board.render();
    }
    
    void checkCollisions() {
        Coordinates head = snake.body.get(0);
        
        // Check wall collision
        if (head.x < 0 || head.x >= boardSize || head.y < 0 || head.y >= boardSize) {
            gameOver = true;
            return;
        }
        
        // Check self collision
        for (int i = 1; i < snake.body.size(); i++) {
            if (head.equals(snake.body.get(i))) {
                gameOver = true;
                return;
            }
        }
        
        // Check food collision
        if (head.equals(food.position)) {
            snake.grow(1);
            snake.increaseSpeed();
            food.generateNewPosition(boardSize);
            foodEaten++;
            
            if (foodEaten % 10 == 0) {
                spawnBonusFood("BLUE");
            }
        }
        
        // Check bonus food collision
        if (bonusFood != null && head.equals(bonusFood.position)) {
            snake.grow(3);
            bonusFood = null;
        }
        
        // Check golden food collision
        if (goldenFood != null && head.equals(goldenFood.position)) {
            snake.decreaseSpeed();
            goldenFood = null;
            timer.setDelay((int)(1000 / snake.speed));
        }
    }
    
    void handleKeyPress(char key) {
        switch (Character.toUpperCase(key)) {
            case 'P':
                paused = !paused;
                break;
            case 'W':
                if (!snake.direction.equals("DOWN")) snake.direction = "UP";
                break;
            case 'S':
                if (!snake.direction.equals("UP")) snake.direction = "DOWN";
                break;
            case 'A':
                if (!snake.direction.equals("RIGHT")) snake.direction = "LEFT";
                break;
            case 'D':
                if (!snake.direction.equals("LEFT")) snake.direction = "RIGHT";
                break;
        }
    }
    
    void spawnBonusFood(String foodColor) {
        if (foodColor.equals("BLUE")) {
            bonusFood = new Food("BLUE");
            bonusFood.generateNewPosition(boardSize);
        } else if (foodColor.equals("YELLOW")) {
            goldenFood = new Food("YELLOW");
            goldenFood.generateNewPosition(boardSize);
        }
    }
    
    void resetGame() {
        snake = new Snake();
        if (difficulty.equals("easy")) {
            snake.speed = 0.5;
        } else {
            snake.speed = 1.0;
        }
        food = new Food("RED");
        food.generateNewPosition(boardSize);
        bonusFood = null;
        goldenFood = null;
        paused = false;
        time = 0;
        gameOver = false;
        foodEaten = 0;
        timer.setDelay((int)(1000 / snake.speed));
    }
}

public class SnakeGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter board size (number of blocks): ");
        int boardSize = scanner.nextInt();
        scanner.nextLine(); // consume newline
        
        System.out.print("Enter difficulty (easy/hard): ");
        String difficulty = scanner.nextLine().toLowerCase();
        
        while (!difficulty.equals("easy") && !difficulty.equals("hard")) {
            System.out.print("Invalid difficulty. Enter easy or hard: ");
            difficulty = scanner.nextLine().toLowerCase();
        }
        
        JFrame frame = new JFrame("Snake Game");
        Game game = new Game(boardSize, difficulty);
        game.board.snake = game.snake;
        game.board.food = game.food;
        game.board.bonusFood = game.bonusFood;
        game.board.goldenFood = game.goldenFood;
        
        frame.add(game.board);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
        
        frame.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                game.handleKeyPress(e.getKeyChar());
                
                if (game.gameOver && e.getKeyChar() == 'R') {
                    game.resetGame();
                    game.board.snake = game.snake;
                    game.board.food = game.food;
                    game.board.bonusFood = game.bonusFood;
                    game.board.goldenFood = game.goldenFood;
                    game.board.render();
                }
            }
        });
        
        // Game loop
        new Timer(100, e -> {
            if (game.gameOver) {
                Graphics g = game.board.getGraphics();
                g.setColor(Color.WHITE);
                g.drawString("Game Over! Press R to restart", 
                    game.board.getWidth()/2 - 80, game.board.getHeight()/2);
            }
            game.board.snake = game.snake;
            game.board.food = game.food;
            game.board.bonusFood = game.bonusFood;
            game.board.goldenFood = game.goldenFood;
        }).start();
    }
}
```

This implementation includes:

1. All required classes (Snake, Food, Board, Coordinates, Game, SnakeGame)
2. All specified attributes and methods
3. Game mechanics:
   - Snake movement and growth
   - Food consumption and regeneration
   - Collision detection (walls and self)
   - Difficulty levels
   - Speed adjustments
   - Bonus food (blue and golden)
   - Pause functionality
4. Keyboard controls (WASD for movement, P for pause, R for restart)
5. Visual representation using Java Swing

The game starts by asking for board size and difficulty, then creates a window where the snake game is played. The snake is controlled with WASD keys, can be paused with P, and the game can be restarted with R after game over.