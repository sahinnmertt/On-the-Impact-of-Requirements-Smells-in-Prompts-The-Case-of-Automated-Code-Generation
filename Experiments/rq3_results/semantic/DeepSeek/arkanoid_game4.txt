# Arkanoid Game in Java 8

Here's a complete implementation of the Arkanoid game according to the specifications:

```java
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.*;

class Ball {
    int x;
    int y;
    int diameter = 10;
    int xSpeed;
    int ySpeed;

    Ball(int x, int y) {
        this.x = x;
        this.y = y;
        this.xSpeed = 5;
        this.ySpeed = 5;
    }

    void move() {
        x += xSpeed;
        y += ySpeed;
    }
}

class Paddle {
    int x;
    int y;
    int width = 20;
    int height = 10;
    static final int SPEED = 10;

    Paddle(int x, int boardHeight) {
        this.x = x;
        this.y = boardHeight - height;
    }

    void moveLeft(int boardWidth) {
        x = Math.max(0, x - SPEED);
    }

    void moveRight(int boardWidth) {
        x = Math.min(boardWidth - width, x + SPEED);
    }
}

class Brick {
    int x;
    int y;
    int width;
    int height = 10;
    int hitsRequired;
    String color;
    boolean destroyed = false;

    Brick(int x, int y, String color, int hitsRequired) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.hitsRequired = hitsRequired;
        this.width = color.equals("gold") ? 40 : 20;
    }

    void hit() {
        hitsRequired--;
        if (hitsRequired <= 0) {
            destroyed = true;
        }
    }
}

class Board {
    int width = 200;
    int height = 300;

    Board(int width, int height) {
        this.width = width;
        this.height = height;
    }
}

class Game {
    Ball ball;
    Paddle paddle;
    Board board;
    List<Brick> bricks;
    int level = 1;
    int lives = 3;
    boolean gameOver = false;
    int maxLevel = 33;
    Random random = new Random();

    Game() {
        board = new Board(200, 300);
        paddle = new Paddle(board.width / 2 - 10, board.height);
        ball = new Ball(0, 0);
        bricks = new ArrayList<>();
        generateBricks();
    }

    void generateBricks() {
        bricks.clear();
        
        // Add blue bricks (50 in level 1)
        int blueBricks = 50;
        if (level > 1) {
            blueBricks = 50 - (level - 1) * 3; // Reduce blue bricks as level increases
            if (blueBricks < 10) blueBricks = 10; // Minimum blue bricks
        }
        
        for (int i = 0; i < blueBricks; i++) {
            int x = random.nextInt(board.width - 20);
            int y = random.nextInt(board.height / 3);
            bricks.add(new Brick(x, y, "blue", 1));
        }
        
        // Add red bricks (2 per level after level 1)
        int redBricks = Math.max(0, (level - 1) * 2);
        for (int i = 0; i < redBricks; i++) {
            int x = random.nextInt(board.width - 20);
            int y = random.nextInt(board.height / 3);
            bricks.add(new Brick(x, y, "red", 2));
        }
        
        // Add gold bricks (1 per level after level 1)
        int goldBricks = Math.max(0, level - 1);
        for (int i = 0; i < goldBricks; i++) {
            int x = random.nextInt(board.width - 40);
            int y = random.nextInt(board.height / 3);
            bricks.add(new Brick(x, y, "gold", 3));
        }
    }

    void updateGame() {
        if (gameOver) return;
        
        ball.move();
        checkCollisions();
        
        // Check if all bricks are destroyed
        boolean levelComplete = true;
        for (Brick brick : bricks) {
            if (!brick.destroyed) {
                levelComplete = false;
                break;
            }
        }
        
        if (levelComplete) {
            if (level < maxLevel) {
                nextLevel();
            } else {
                gameOver = true;
                JOptionPane.showMessageDialog(null, "Congratulations! You won the game!");
            }
        }
    }

    void checkCollisions() {
        // Check collision with walls
        if (ball.x <= 0 || ball.x + ball.diameter >= board.width) {
            ball.xSpeed = -ball.xSpeed;
        }
        if (ball.y <= 0) {
            ball.ySpeed = -ball.ySpeed;
        }
        
        // Check if ball fell off the bottom
        if (ball.y + ball.diameter >= board.height) {
            loseLife();
            return;
        }
        
        // Check collision with paddle
        if (ball.y + ball.diameter >= paddle.y && 
            ball.y <= paddle.y + paddle.height &&
            ball.x + ball.diameter >= paddle.x && 
            ball.x <= paddle.x + paddle.width) {
            ball.ySpeed = -Math.abs(ball.ySpeed); // Ensure ball goes up
            // Add some angle variation based on where ball hits paddle
            int paddleCenter = paddle.x + paddle.width / 2;
            int ballCenter = ball.x + ball.diameter / 2;
            ball.xSpeed = (ballCenter - paddleCenter) / 3;
        }
        
        // Check collision with bricks
        for (Brick brick : bricks) {
            if (!brick.destroyed && 
                ball.x + ball.diameter >= brick.x && 
                ball.x <= brick.x + brick.width &&
                ball.y + ball.diameter >= brick.y && 
                ball.y <= brick.y + brick.height) {
                
                brick.hit();
                
                // Determine collision side and bounce accordingly
                boolean fromLeft = ball.x + ball.diameter >= brick.x && ball.x < brick.x;
                boolean fromRight = ball.x <= brick.x + brick.width && ball.x + ball.diameter > brick.x + brick.width;
                boolean fromTop = ball.y + ball.diameter >= brick.y && ball.y < brick.y;
                boolean fromBottom = ball.y <= brick.y + brick.height && ball.y + ball.diameter > brick.y + brick.height;
                
                if (fromLeft || fromRight) {
                    ball.xSpeed = -ball.xSpeed;
                }
                if (fromTop || fromBottom) {
                    ball.ySpeed = -ball.ySpeed;
                }
                
                break; // Only handle one collision per frame
            }
        }
    }

    void loseLife() {
        lives--;
        if (lives <= 0) {
            gameOver = true;
        } else {
            // Reset ball and paddle position
            ball.x = 0;
            ball.y = 0;
            ball.xSpeed = 5;
            ball.ySpeed = 5;
            paddle.x = board.width / 2 - 10;
        }
    }

    void nextLevel() {
        level++;
        ball.x = 0;
        ball.y = 0;
        ball.xSpeed = 5 + (level - 1); // Increase speed by 1 per level
        ball.ySpeed = 5 + (level - 1);
        paddle.x = board.width / 2 - 10;
        generateBricks();
    }

    void resetGame() {
        level = 1;
        lives = 3;
        gameOver = false;
        ball.x = 0;
        ball.y = 0;
        ball.xSpeed = 5;
        ball.ySpeed = 5;
        paddle.x = board.width / 2 - 10;
        generateBricks();
    }
}

public class ArkanoidGame extends JPanel implements KeyListener {
    private Game game;
    private Timer timer;

    public ArkanoidGame() {
        game = new Game();
        addKeyListener(this);
        setFocusable(true);
        setPreferredSize(new Dimension(game.board.width, game.board.height));
        
        timer = new Timer(50, e -> {
            game.updateGame();
            repaint();
        });
        timer.start();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        // Draw background
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, game.board.width, game.board.height);
        
        // Draw ball
        g.setColor(Color.WHITE);
        g.fillOval(game.ball.x, game.ball.y, game.ball.diameter, game.ball.diameter);
        
        // Draw paddle
        g.setColor(Color.GREEN);
        g.fillRect(game.paddle.x, game.paddle.y, game.paddle.width, game.paddle.height);
        
        // Draw bricks
        for (Brick brick : game.bricks) {
            if (!brick.destroyed) {
                if (brick.color.equals("blue")) {
                    g.setColor(Color.BLUE);
                } else if (brick.color.equals("red")) {
                    g.setColor(Color.RED);
                } else if (brick.color.equals("gold")) {
                    g.setColor(Color.YELLOW);
                }
                g.fillRect(brick.x, brick.y, brick.width, brick.height);
            }
        }
        
        // Draw game info
        g.setColor(Color.WHITE);
        g.drawString("Level: " + game.level, 5, 15);
        g.drawString("Lives: " + game.lives, 5, 30);
        
        // Draw game over message
        if (game.gameOver) {
            g.setColor(Color.RED);
            g.setFont(new Font("Arial", Font.BOLD, 20));
            String message = game.level > game.maxLevel ? "You Win!" : "Game Over";
            g.drawString(message, game.board.width / 2 - 50, game.board.height / 2);
            g.setFont(new Font("Arial", Font.PLAIN, 12));
            g.drawString("Press R to restart or Q to quit", game.board.width / 2 - 70, game.board.height / 2 + 20);
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (game.gameOver) {
            if (e.getKeyCode() == KeyEvent.VK_R) {
                game.resetGame();
            } else if (e.getKeyCode() == KeyEvent.VK_Q) {
                System.exit(0);
            }
        } else {
            if (e.getKeyCode() == KeyEvent.VK_LEFT) {
                game.paddle.moveLeft(game.board.width);
            } else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
                game.paddle.moveRight(game.board.width);
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {}

    @Override
    public void keyTyped(KeyEvent e) {}

    public static void main(String[] args) {
        JFrame frame = new JFrame("Arkanoid Game");
        ArkanoidGame game = new ArkanoidGame();
        frame.add(game);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}
```

This implementation includes all the required classes and methods, and fulfills all 19 requirements:

1. The game has 33 levels
2. Board dimensions are 200x300 pixels
3. Correct sizes for all game elements
4. Ball starts at top left with 45° angle
5. Paddle controls ball direction
6. Level completes when all bricks are destroyed
7. Brick colors are blue, red, and gold
8. Brick sizes are 20x10 or 40x10
9. Different hit requirements for each brick type
10. Level 1 has 50 blue bricks
11. Paddle moves horizontally at bottom
12. Ball bounces correctly off walls and paddle
13. Ball speed increases each level
14. Levels progress with different brick arrangements
15. Brick layout is randomly generated
16. Player starts with 3 lives
17. Life lost when ball falls off bottom
18. Level restarts when life is lost
19. Game can be restarted after game over

The game uses Swing for rendering and includes keyboard controls for the paddle (left/right arrows) and game restart (R key).