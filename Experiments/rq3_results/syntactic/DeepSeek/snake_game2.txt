Here's the complete implementation of the Snake game in Java 8, adhering to all the specified requirements:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Coordinates {
    int x;
    int y;
    
    Coordinates(int x, int y) {
        this.x = x;
        this.y = y;
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Coordinates that = (Coordinates) obj;
        return x == that.x && y == that.y;
    }
}

class Snake {
    List<Coordinates> body;
    String direction;
    double speed;
    int growing;
    String color;
    
    Snake() {
        body = new ArrayList<>();
        body.add(new Coordinates(0, 0));
        direction = "UP";
        color = "GREEN";
        growing = 0;
    }
    
    void move() {
        Coordinates head = body.get(0);
        Coordinates newHead;
        
        switch (direction) {
            case "UP":
                newHead = new Coordinates(head.x, head.y - 1);
                break;
            case "DOWN":
                newHead = new Coordinates(head.x, head.y + 1);
                break;
            case "LEFT":
                newHead = new Coordinates(head.x - 1, head.y);
                break;
            case "RIGHT":
                newHead = new Coordinates(head.x + 1, head.y);
                break;
            default:
                newHead = new Coordinates(head.x, head.y - 1);
        }
        
        body.add(0, newHead);
        
        if (growing > 0) {
            growing--;
        } else {
            body.remove(body.size() - 1);
        }
    }
    
    void grow(int amount) {
        growing += amount;
    }
    
    void increaseSpeed() {
        speed *= 1.01;
    }
    
    void decreaseSpeed() {
        speed *= 0.95;
    }
}

class Food {
    Coordinates position;
    String color;
    
    Food(String color) {
        this.color = color;
        generateNewPosition(20); // Default size, will be reset in game
    }
    
    void generateNewPosition(int boardSize) {
        Random random = new Random();
        position = new Coordinates(random.nextInt(boardSize), random.nextInt(boardSize));
    }
}

class Board {
    int size;
    int blockSize;
    
    Board(int k) {
        size = k;
        blockSize = 5;
    }
    
    void render() {
        // In a real implementation, this would draw the game state
        // For console purposes, we'll just print basic info
        System.out.println("Rendering board of size " + size + "x" + size);
    }
}

class Game {
    Snake snake;
    Food food;
    Food bonusFood;
    boolean paused;
    String difficulty;
    int time;
    boolean gameOver;
    Board board;
    int foodEaten;
    long lastBonusFoodTime;
    long lastGoldenFoodTime;
    boolean goldenFoodActive;
    
    Game(int boardSize, String difficulty) {
        board = new Board(boardSize);
        snake = new Snake();
        food = new Food("RED");
        bonusFood = null;
        paused = false;
        this.difficulty = difficulty;
        time = 0;
        gameOver = false;
        foodEaten = 0;
        lastBonusFoodTime = 0;
        lastGoldenFoodTime = 0;
        goldenFoodActive = false;
        
        if (difficulty.equalsIgnoreCase("easy")) {
            snake.speed = 0.5;
        } else {
            snake.speed = 2.0;
        }
        
        // Adjust food position to be within board
        food.generateNewPosition(boardSize);
    }
    
    void updateGame() {
        if (paused || gameOver) return;
        
        // Move snake
        snake.move();
        
        // Check collisions
        checkCollisions();
        
        // Check for bonus food spawning
        if (foodEaten >= 10 && bonusFood == null) {
            spawnBonusFood("BLUE");
            foodEaten = 0;
        }
        
        // Check for golden food spawning (every 5 minutes)
        long currentTime = System.currentTimeMillis();
        if (!goldenFoodActive && (currentTime - lastGoldenFoodTime) >= 5 * 60 * 1000) {
            spawnBonusFood("GOLD");
            lastGoldenFoodTime = currentTime;
            goldenFoodActive = true;
        }
        
        // Update board
        board.render();
    }
    
    void checkCollisions() {
        Coordinates head = snake.body.get(0);
        
        // Check wall collision
        if (head.x < 0 || head.x >= board.size || head.y < 0 || head.y >= board.size) {
            gameOver = true;
            return;
        }
        
        // Check self collision
        for (int i = 1; i < snake.body.size(); i++) {
            if (head.equals(snake.body.get(i))) {
                gameOver = true;
                return;
            }
        }
        
        // Check food collision
        if (head.equals(food.position)) {
            snake.grow(1);
            snake.increaseSpeed();
            food.generateNewPosition(board.size);
            foodEaten++;
        }
        
        // Check bonus food collision
        if (bonusFood != null && head.equals(bonusFood.position)) {
            if (bonusFood.color.equals("BLUE")) {
                snake.grow(3);
            } else if (bonusFood.color.equals("GOLD")) {
                snake.decreaseSpeed();
                goldenFoodActive = false;
            }
            bonusFood = null;
        }
    }
    
    void handleKeyPress(char key) {
        switch (Character.toUpperCase(key)) {
            case 'P':
                paused = !paused;
                break;
            case 'W':
                if (!snake.direction.equals("DOWN")) snake.direction = "UP";
                break;
            case 'S':
                if (!snake.direction.equals("UP")) snake.direction = "DOWN";
                break;
            case 'A':
                if (!snake.direction.equals("RIGHT")) snake.direction = "LEFT";
                break;
            case 'D':
                if (!snake.direction.equals("LEFT")) snake.direction = "RIGHT";
                break;
        }
    }
    
    void spawnBonusFood(String foodColor) {
        bonusFood = new Food(foodColor);
        bonusFood.generateNewPosition(board.size);
    }
    
    void resetGame() {
        snake = new Snake();
        food = new Food("RED");
        bonusFood = null;
        paused = false;
        gameOver = false;
        foodEaten = 0;
        goldenFoodActive = false;
        
        if (difficulty.equalsIgnoreCase("easy")) {
            snake.speed = 0.5;
        } else {
            snake.speed = 2.0;
        }
    }
}

public class SnakeGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter board size (k x k blocks): ");
        int boardSize = scanner.nextInt();
        scanner.nextLine(); // consume newline
        
        System.out.print("Enter difficulty (easy/hard): ");
        String difficulty = scanner.nextLine();
        
        Game game = new Game(boardSize, difficulty);
        
        System.out.println("Game started! Controls: W (up), S (down), A (left), D (right), P (pause)");
        
        // Simple console-based game loop (in a real implementation, this would be more sophisticated)
        while (!game.gameOver) {
            if (System.in.available() > 0) {
                char key = (char) System.in.read();
                game.handleKeyPress(key);
            }
            
            game.updateGame();
            
            try {
                long sleepTime = (long) (1000 / game.snake.speed);
                Thread.sleep(sleepTime);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        
        System.out.println("Game Over!");
        scanner.close();
    }
}
```

This implementation includes all the required classes and methods, and fulfills all 14 requirements:

1. Snake grows when eating food
2. Snake eats food when touching it
3. Snake grows by one block when eating normal food
4. Game ends when snake hits wall
5. Game ends when snake hits itself
6. Board size is configurable with 5x5 pixel blocks
7. Initial snake position and direction, food position
8. Keyboard controls for direction
9. New food spawns randomly after eating
10. Speed increases by 1% after eating food
11. Difficulty levels with different speeds
12. Blue bonus food after 10 normal foods (adds 3 blocks)
13. Golden food every 5 minutes (decreases speed by 5%)
14. Pause functionality with 'P' key

Note that this is a console-based implementation for demonstration purposes. In a real application, you would typically use a GUI library like JavaFX or Swing for rendering the game properly. The core game logic is all implemented according to the requirements, and the rendering part could be replaced with actual graphics drawing code.